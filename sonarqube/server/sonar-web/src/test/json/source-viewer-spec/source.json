{"sources": [
  [1, "<span class=\"cppd\">/*</span>"],
  [2, "<span class=\"cppd\"> * SonarQube, open source software quality management tool.</span>"],
  [3, "<span class=\"cppd\"> * Copyright (C) 2008-2014 SonarSource</span>"],
  [4, "<span class=\"cppd\"> * mailto:contact AT sonarsource DOT com</span>"],
  [5, "<span class=\"cppd\"> *</span>"],
  [6, "<span class=\"cppd\"> * SonarQube is free software; you can redistribute it and/or</span>"],
  [7, "<span class=\"cppd\"> * modify it under the terms of the GNU Lesser General Public</span>"],
  [8, "<span class=\"cppd\"> * License as published by the Free Software Foundation; either</span>"],
  [9, "<span class=\"cppd\"> * version 3 of the License, or (at your option) any later version.</span>"],
  [10, "<span class=\"cppd\"> *</span>"],
  [11, "<span class=\"cppd\"> * SonarQube is distributed in the hope that it will be useful,</span>"],
  [12, "<span class=\"cppd\"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span>"],
  [13, "<span class=\"cppd\"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>"],
  [14, "<span class=\"cppd\"> * Lesser General Public License for more details.</span>"],
  [15, "<span class=\"cppd\"> *</span>"],
  [16, "<span class=\"cppd\"> * You should have received a copy of the GNU Lesser General Public License</span>"],
  [17, "<span class=\"cppd\"> * along with this program; if not, write to the Free Software Foundation,</span>"],
  [18, "<span class=\"cppd\"> * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.</span>"],
  [19, "<span class=\"cppd\"> */</span>"],
  [20, "<span class=\"k\">package </span>org.sonar.batch.index;"],
  [21, ""],
  [22, "<span class=\"k\">import </span>com.google.common.collect.<span class=\"sym-949 sym\">Sets</span>;"],
  [23, "<span class=\"k\">import </span>com.persistit.<span class=\"sym-976 sym\">Exchange</span>;"],
  [24, "<span class=\"k\">import </span>com.persistit.<span class=\"sym-1007 sym\">Key</span>;"],
  [25, "<span class=\"k\">import </span>com.persistit.<span class=\"sym-1033 sym\">KeyFilter</span>;"],
  [26, "<span class=\"k\">import </span>com.persistit.exception.<span class=\"sym-1075 sym\">PersistitException</span>;"],
  [27, "<span class=\"k\">import </span>org.apache.commons.lang.builder.<span class=\"sym-1134 sym\">ToStringBuilder</span>;"],
  [28, ""],
  [29, "<span class=\"k\">import </span>javax.annotation.<span class=\"sym-1176 sym\">CheckForNull</span>;"],
  [30, ""],
  [31, "<span class=\"k\">import </span>java.io.<span class=\"sym-1206 sym\">Serializable</span>;"],
  [32, "<span class=\"k\">import </span>java.util.<span class=\"sym-1237 sym\">Iterator</span>;"],
  [33, "<span class=\"k\">import </span>java.util.<span class=\"sym-1264 sym\">NoSuchElementException</span>;"],
  [34, "<span class=\"k\">import </span>java.util.<span class=\"sym-1305 sym\">Set</span>;"],
  [35, ""],
  [36, "<span class=\"cppd\">/**</span>"],
  [37, "<span class=\"cppd\"> * &lt;p&gt;</span>"],
  [38, "<span class=\"cppd\"> * This cache is not thread-safe, due to direct usage of {@link com.persistit.Exchange}</span>"],
  [39, "<span class=\"cppd\"> * &lt;/p&gt;</span>"],
  [40, "<span class=\"cppd\"> */</span>"],
  [41, "<span class=\"k\">public </span><span class=\"k\">class </span><span class=\"sym-1435 sym\">Cache</span>&lt;V <span class=\"k\">extends </span>Serializable&gt; {"],
  [42, ""],
  [43, "  <span class=\"k\">private </span><span class=\"k\">final </span>String <span class=\"sym-1491 sym\">name</span>;"],
  [44, "  <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-1522 sym\">exchange</span>;"],
  [45, ""],
  [46, "  <span class=\"sym-1535 sym\">Cache</span>(String <span class=\"sym-1548 sym\">name</span>, <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-1563 sym\">exchange</span>) {"],
  [47, "    <span class=\"k\">this</span>.<span class=\"sym-1491 sym\">name</span> = <span class=\"sym-1548 sym\">name</span>;"],
  [48, "    <span class=\"k\">this</span>.<span class=\"sym-1522 sym\">exchange</span> = <span class=\"sym-1563 sym\">exchange</span>;"],
  [49, "  }"],
  [50, ""],
  [51, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-1650 sym\">put</span>(Object <span class=\"sym-1661 sym\">key</span>, V <span class=\"sym-1668 sym\">value</span>) {"],
  [52, "    resetKey(<span class=\"sym-1661 sym\">key</span>);"],
  [53, "    <span class=\"k\">return </span><span class=\"sym-2134 sym\">doPut</span>(<span class=\"sym-1668 sym\">value</span>);"],
  [54, "  }"],
  [55, ""],
  [56, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-1744 sym\">put</span>(Object <span class=\"sym-1755 sym\">firstKey</span>, Object <span class=\"sym-1772 sym\">secondKey</span>, V <span class=\"sym-1785 sym\">value</span>) {"],
  [57, "    resetKey(<span class=\"sym-1755 sym\">firstKey</span>, <span class=\"sym-1772 sym\">secondKey</span>);"],
  [58, "    <span class=\"k\">return </span><span class=\"sym-2134 sym\">doPut</span>(<span class=\"sym-1785 sym\">value</span>);"],
  [59, "  }"],
  [60, ""],
  [61, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-1877 sym\">put</span>(Object <span class=\"sym-1888 sym\">firstKey</span>, Object <span class=\"sym-1905 sym\">secondKey</span>, Object <span class=\"sym-1923 sym\">thirdKey</span>, V <span class=\"sym-1935 sym\">value</span>) {"],
  [62, "    resetKey(<span class=\"sym-1888 sym\">firstKey</span>, <span class=\"sym-1905 sym\">secondKey</span>, <span class=\"sym-1923 sym\">thirdKey</span>);"],
  [63, "    <span class=\"k\">return </span><span class=\"sym-2134 sym\">doPut</span>(<span class=\"sym-1935 sym\">value</span>);"],
  [64, "  }"],
  [65, ""],
  [66, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-2037 sym\">put</span>(Object[] <span class=\"sym-2050 sym\">key</span>, V <span class=\"sym-2057 sym\">value</span>) {"],
  [67, "    resetKey(<span class=\"sym-2050 sym\">key</span>);"],
  [68, "    <span class=\"k\">return </span><span class=\"sym-2134 sym\">doPut</span>(<span class=\"sym-2057 sym\">value</span>);"],
  [69, "  }"],
  [70, ""],
  [71, "  <span class=\"k\">private </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-2134 sym\">doPut</span>(V <span class=\"sym-2142 sym\">value</span>) {"],
  [72, "    <span class=\"k\">try </span>{"],
  [73, "      <span class=\"sym-1522 sym\">exchange</span>.getValue().put(<span class=\"sym-2142 sym\">value</span>);"],
  [74, "      <span class=\"sym-1522 sym\">exchange</span>.store();"],
  [75, "      <span class=\"k\">return </span><span class=\"k\">this</span>;"],
  [76, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-2265 sym\">e</span>) {"],
  [77, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to put element in the cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-2265 sym\">e</span>);"],
  [78, "    }"],
  [79, "  }"],
  [80, ""],
  [81, "  <span class=\"cppd\">/**</span>"],
  [82, "<span class=\"cppd\">   * Returns the value object associated with keys, or null if not found.</span>"],
  [83, "<span class=\"cppd\">   */</span>"],
  [84, "  <span class=\"k\">public </span>V <span class=\"sym-2464 sym\">get</span>(Object <span class=\"sym-2475 sym\">key</span>) {"],
  [85, "    resetKey(<span class=\"sym-2475 sym\">key</span>);"],
  [86, "    <span class=\"k\">return </span><span class=\"sym-3219 sym\">doGet</span>();"],
  [87, "  }"],
  [88, ""],
  [89, "  <span class=\"cppd\">/**</span>"],
  [90, "<span class=\"cppd\">   * Returns the value object associated with keys, or null if not found.</span>"],
  [91, "<span class=\"cppd\">   */</span>"],
  [92, "  <span class=\"a\">@<span class=\"sym-1176 sym\">CheckForNull</span></span>"],
  [93, "<span class=\"a\">  </span><span class=\"k\">public </span>V <span class=\"sym-2639 sym\">get</span>(Object <span class=\"sym-2650 sym\">firstKey</span>, Object <span class=\"sym-2667 sym\">secondKey</span>) {"],
  [94, "    resetKey(<span class=\"sym-2650 sym\">firstKey</span>, <span class=\"sym-2667 sym\">secondKey</span>);"],
  [95, "    <span class=\"k\">return </span><span class=\"sym-3219 sym\">doGet</span>();"],
  [96, "  }"],
  [97, ""],
  [98, "  <span class=\"cppd\">/**</span>"],
  [99, "<span class=\"cppd\">   * Returns the value object associated with keys, or null if not found.</span>"],
  [100, "<span class=\"cppd\">   */</span>"],
  [101, "  <span class=\"a\">@<span class=\"sym-1176 sym\">CheckForNull</span></span>"],
  [102, "<span class=\"a\">  </span><span class=\"k\">public </span>V <span class=\"sym-2853 sym\">get</span>(Object <span class=\"sym-2864 sym\">firstKey</span>, Object <span class=\"sym-2881 sym\">secondKey</span>, Object <span class=\"sym-2899 sym\">thirdKey</span>) {"],
  [103, "    resetKey(<span class=\"sym-2864 sym\">firstKey</span>, <span class=\"sym-2881 sym\">secondKey</span>, <span class=\"sym-2899 sym\">thirdKey</span>);"],
  [104, "    <span class=\"k\">return </span><span class=\"sym-3219 sym\">doGet</span>();"],
  [105, "  }"],
  [106, ""],
  [107, "  <span class=\"cppd\">/**</span>"],
  [108, "<span class=\"cppd\">   * Returns the value object associated with keys, or null if not found.</span>"],
  [109, "<span class=\"cppd\">   */</span>"],
  [110, "  <span class=\"a\">@<span class=\"sym-1176 sym\">CheckForNull</span></span>"],
  [111, "<span class=\"a\">  </span><span class=\"k\">public </span>V <span class=\"sym-3094 sym\">get</span>(Object[] <span class=\"sym-3107 sym\">key</span>) {"],
  [112, "    resetKey(<span class=\"sym-3107 sym\">key</span>);"],
  [113, "    <span class=\"k\">return </span><span class=\"sym-3219 sym\">doGet</span>();"],
  [114, "  }"],
  [115, ""],
  [116, "  <span class=\"a\">@SuppressWarnings</span>(<span class=\"s\">\"unchecked\"</span>)"],
  [117, "  <span class=\"a\">@<span class=\"sym-1176 sym\">CheckForNull</span></span>"],
  [118, "<span class=\"a\">  </span><span class=\"k\">private </span>V <span class=\"sym-3219 sym\">doGet</span>() {"],
  [119, "    <span class=\"k\">try </span>{"],
  [120, "      <span class=\"sym-1522 sym\">exchange</span>.fetch();"],
  [121, "      <span class=\"k\">if </span>(!<span class=\"sym-1522 sym\">exchange</span>.getValue().isDefined()) {"],
  [122, "        <span class=\"k\">return </span><span class=\"k\">null</span>;"],
  [123, "      }"],
  [124, "      <span class=\"k\">return </span>(V) <span class=\"sym-1522 sym\">exchange</span>.getValue().get();"],
  [125, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-3405 sym\">e</span>) {"],
  [126, "      <span class=\"cppd\">// TODO add parameters to message</span>"],
  [127, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to get element from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-3405 sym\">e</span>);"],
  [128, "    }"],
  [129, "  }"],
  [130, ""],
  [131, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-3562 sym\">containsKey</span>(Object <span class=\"sym-3581 sym\">key</span>) {"],
  [132, "    resetKey(<span class=\"sym-3581 sym\">key</span>);"],
  [133, "    <span class=\"k\">return </span><span class=\"sym-4050 sym\">doContainsKey</span>();"],
  [134, "  }"],
  [135, ""],
  [136, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-3657 sym\">containsKey</span>(Object <span class=\"sym-3676 sym\">firstKey</span>, Object <span class=\"sym-3693 sym\">secondKey</span>) {"],
  [137, "    resetKey(<span class=\"sym-3676 sym\">firstKey</span>, <span class=\"sym-3693 sym\">secondKey</span>);"],
  [138, "    <span class=\"k\">return </span><span class=\"sym-4050 sym\">doContainsKey</span>();"],
  [139, "  }"],
  [140, ""],
  [141, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-3791 sym\">containsKey</span>(Object <span class=\"sym-3810 sym\">firstKey</span>, Object <span class=\"sym-3827 sym\">secondKey</span>, Object <span class=\"sym-3845 sym\">thirdKey</span>) {"],
  [142, "    resetKey(<span class=\"sym-3810 sym\">firstKey</span>, <span class=\"sym-3827 sym\">secondKey</span>, <span class=\"sym-3845 sym\">thirdKey</span>);"],
  [143, "    <span class=\"k\">return </span><span class=\"sym-4050 sym\">doContainsKey</span>();"],
  [144, "  }"],
  [145, ""],
  [146, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-3952 sym\">containsKey</span>(Object[] <span class=\"sym-3973 sym\">key</span>) {"],
  [147, "    resetKey(<span class=\"sym-3973 sym\">key</span>);"],
  [148, "    <span class=\"k\">return </span><span class=\"sym-4050 sym\">doContainsKey</span>();"],
  [149, "  }"],
  [150, ""],
  [151, "  <span class=\"k\">private </span><span class=\"k\">boolean </span><span class=\"sym-4050 sym\">doContainsKey</span>() {"],
  [152, "    <span class=\"k\">try </span>{"],
  [153, "      <span class=\"sym-1522 sym\">exchange</span>.fetch();"],
  [154, "      <span class=\"k\">return </span><span class=\"sym-1522 sym\">exchange</span>.isValueDefined();"],
  [155, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-4165 sym\">e</span>) {"],
  [156, "      <span class=\"cppd\">// TODO add parameters to message</span>"],
  [157, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to check if element is in cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-4165 sym\">e</span>);"],
  [158, "    }"],
  [159, "  }"],
  [160, ""],
  [161, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-4328 sym\">remove</span>(Object <span class=\"sym-4342 sym\">key</span>) {"],
  [162, "    resetKey(<span class=\"sym-4342 sym\">key</span>);"],
  [163, "    <span class=\"k\">return </span><span class=\"sym-4776 sym\">doRemove</span>();"],
  [164, "  }"],
  [165, ""],
  [166, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-4413 sym\">remove</span>(Object <span class=\"sym-4427 sym\">firstKey</span>, Object <span class=\"sym-4444 sym\">secondKey</span>) {"],
  [167, "    resetKey(<span class=\"sym-4427 sym\">firstKey</span>, <span class=\"sym-4444 sym\">secondKey</span>);"],
  [168, "    <span class=\"k\">return </span><span class=\"sym-4776 sym\">doRemove</span>();"],
  [169, "  }"],
  [170, ""],
  [171, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-4537 sym\">remove</span>(Object <span class=\"sym-4551 sym\">firstKey</span>, Object <span class=\"sym-4568 sym\">secondKey</span>, Object <span class=\"sym-4586 sym\">thirdKey</span>) {"],
  [172, "    resetKey(<span class=\"sym-4551 sym\">firstKey</span>, <span class=\"sym-4568 sym\">secondKey</span>, <span class=\"sym-4586 sym\">thirdKey</span>);"],
  [173, "    <span class=\"k\">return </span><span class=\"sym-4776 sym\">doRemove</span>();"],
  [174, "  }"],
  [175, ""],
  [176, "  <span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-4688 sym\">remove</span>(Object[] <span class=\"sym-4704 sym\">key</span>) {"],
  [177, "    resetKey(<span class=\"sym-4704 sym\">key</span>);"],
  [178, "    <span class=\"k\">return </span><span class=\"sym-4776 sym\">doRemove</span>();"],
  [179, "  }"],
  [180, ""],
  [181, "  <span class=\"k\">private </span><span class=\"k\">boolean </span><span class=\"sym-4776 sym\">doRemove</span>() {"],
  [182, "    <span class=\"k\">try </span>{"],
  [183, "      <span class=\"k\">return </span><span class=\"sym-1522 sym\">exchange</span>.remove();"],
  [184, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-4854 sym\">e</span>) {"],
  [185, "      <span class=\"cppd\">// TODO add parameters to message</span>"],
  [186, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to get element from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-4854 sym\">e</span>);"],
  [187, "    }"],
  [188, "  }"],
  [189, ""],
  [190, "  <span class=\"cppd\">/**</span>"],
  [191, "<span class=\"cppd\">   * Removes everything in the specified group.</span>"],
  [192, "<span class=\"cppd\">   *</span>"],
  [193, "<span class=\"cppd\">   * @param group The group name.</span>"],
  [194, "<span class=\"cppd\">   */</span>"],
  [195, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-5111 sym\">clear</span>(Object <span class=\"sym-5124 sym\">key</span>) {"],
  [196, "    resetKey(<span class=\"sym-5124 sym\">key</span>);"],
  [197, "    <span class=\"k\">return </span><span class=\"sym-5555 sym\">doClear</span>();"],
  [198, "  }"],
  [199, ""],
  [200, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-5195 sym\">clear</span>(Object <span class=\"sym-5208 sym\">firstKey</span>, Object <span class=\"sym-5225 sym\">secondKey</span>) {"],
  [201, "    resetKey(<span class=\"sym-5208 sym\">firstKey</span>, <span class=\"sym-5225 sym\">secondKey</span>);"],
  [202, "    <span class=\"k\">return </span><span class=\"sym-5555 sym\">doClear</span>();"],
  [203, "  }"],
  [204, ""],
  [205, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-5318 sym\">clear</span>(Object <span class=\"sym-5331 sym\">firstKey</span>, Object <span class=\"sym-5348 sym\">secondKey</span>, Object <span class=\"sym-5366 sym\">thirdKey</span>) {"],
  [206, "    resetKey(<span class=\"sym-5331 sym\">firstKey</span>, <span class=\"sym-5348 sym\">secondKey</span>, <span class=\"sym-5366 sym\">thirdKey</span>);"],
  [207, "    <span class=\"k\">return </span><span class=\"sym-5555 sym\">doClear</span>();"],
  [208, "  }"],
  [209, ""],
  [210, "  <span class=\"k\">public </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-5468 sym\">clear</span>(Object[] <span class=\"sym-5483 sym\">key</span>) {"],
  [211, "    resetKey(<span class=\"sym-5483 sym\">key</span>);"],
  [212, "    <span class=\"k\">return </span><span class=\"sym-5555 sym\">doClear</span>();"],
  [213, "  }"],
  [214, ""],
  [215, "  <span class=\"k\">private </span><span class=\"sym-1435 sym\">Cache</span>&lt;V&gt; <span class=\"sym-5555 sym\">doClear</span>() {"],
  [216, "    <span class=\"k\">try </span>{"],
  [217, "      <span class=\"sym-1007 sym\">Key</span> <span class=\"sym-5587 sym\">to</span> = <span class=\"k\">new </span><span class=\"sym-1007 sym\">Key</span>(<span class=\"sym-1522 sym\">exchange</span>.getKey());"],
  [218, "      <span class=\"sym-5587 sym\">to</span>.append(<span class=\"sym-1007 sym\">Key</span>.AFTER);"],
  [219, "      <span class=\"sym-1522 sym\">exchange</span>.removeKeyRange(<span class=\"sym-1522 sym\">exchange</span>.getKey(), <span class=\"sym-5587 sym\">to</span>);"],
  [220, "      <span class=\"k\">return </span><span class=\"k\">this</span>;"],
  [221, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-5744 sym\">e</span>) {"],
  [222, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to clear values from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-5744 sym\">e</span>);"],
  [223, "    }"],
  [224, "  }"],
  [225, ""],
  [226, "  <span class=\"cppd\">/**</span>"],
  [227, "<span class=\"cppd\">   * Clears the default as well as all group caches.</span>"],
  [228, "<span class=\"cppd\">   */</span>"],
  [229, "  <span class=\"k\">public </span><span class=\"k\">void </span><span class=\"sym-5924 sym\">clear</span>() {"],
  [230, "    <span class=\"k\">try </span>{"],
  [231, "      <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [232, "      <span class=\"sym-1522 sym\">exchange</span>.removeAll();"],
  [233, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-6019 sym\">e</span>) {"],
  [234, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to clear cache\"</span>, <span class=\"sym-6019 sym\">e</span>);"],
  [235, "    }"],
  [236, "  }"],
  [237, ""],
  [238, "  <span class=\"cppd\">/**</span>"],
  [239, "<span class=\"cppd\">   * Returns the set of cache keys associated with this group.</span>"],
  [240, "<span class=\"cppd\">   * TODO implement a lazy-loading equivalent with Iterator/Iterable</span>"],
  [241, "<span class=\"cppd\">   *</span>"],
  [242, "<span class=\"cppd\">   * @param group The group.</span>"],
  [243, "<span class=\"cppd\">   * @return The set of cache keys for this group.</span>"],
  [244, "<span class=\"cppd\">   */</span>"],
  [245, "  <span class=\"a\">@SuppressWarnings</span>(<span class=\"s\">\"rawtypes\"</span>)"],
  [246, "  <span class=\"k\">public </span><span class=\"sym-1305 sym\">Set</span> <span class=\"sym-6374 sym\">keySet</span>(Object <span class=\"sym-6388 sym\">key</span>) {"],
  [247, "    <span class=\"k\">try </span>{"],
  [248, "      <span class=\"sym-1305 sym\">Set</span>&lt;Object&gt; <span class=\"sym-6423 sym\">keys</span> = <span class=\"sym-949 sym\">Sets</span>.newLinkedHashSet();"],
  [249, "      <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [250, "      <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-6494 sym\">iteratorExchange</span> = <span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>);"],
  [251, "      <span class=\"sym-6494 sym\">iteratorExchange</span>.append(<span class=\"sym-6388 sym\">key</span>);"],
  [252, "      <span class=\"sym-6494 sym\">iteratorExchange</span>.append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [253, "      <span class=\"k\">while </span>(<span class=\"sym-6494 sym\">iteratorExchange</span>.next(<span class=\"k\">false</span>)) {"],
  [254, "        <span class=\"sym-6423 sym\">keys</span>.add(<span class=\"sym-6494 sym\">iteratorExchange</span>.getKey().indexTo(-<span class=\"c\">1</span>).decode());"],
  [255, "      }"],
  [256, "      <span class=\"k\">return </span><span class=\"sym-6423 sym\">keys</span>;"],
  [257, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-6777 sym\">e</span>) {"],
  [258, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to get keys from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-6777 sym\">e</span>);"],
  [259, "    }"],
  [260, "  }"],
  [261, ""],
  [262, "  <span class=\"a\">@SuppressWarnings</span>(<span class=\"s\">\"rawtypes\"</span>)"],
  [263, "  <span class=\"k\">public </span><span class=\"sym-1305 sym\">Set</span> <span class=\"sym-6919 sym\">keySet</span>(Object <span class=\"sym-6933 sym\">firstKey</span>, Object <span class=\"sym-6950 sym\">secondKey</span>) {"],
  [264, "    <span class=\"k\">try </span>{"],
  [265, "      <span class=\"sym-1305 sym\">Set</span>&lt;Object&gt; <span class=\"sym-6991 sym\">keys</span> = <span class=\"sym-949 sym\">Sets</span>.newLinkedHashSet();"],
  [266, "      <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [267, "      <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-7062 sym\">iteratorExchange</span> = <span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>);"],
  [268, "      <span class=\"sym-7062 sym\">iteratorExchange</span>.append(<span class=\"sym-6933 sym\">firstKey</span>);"],
  [269, "      <span class=\"sym-7062 sym\">iteratorExchange</span>.append(<span class=\"sym-6950 sym\">secondKey</span>);"],
  [270, "      <span class=\"sym-7062 sym\">iteratorExchange</span>.append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [271, "      <span class=\"k\">while </span>(<span class=\"sym-7062 sym\">iteratorExchange</span>.next(<span class=\"k\">false</span>)) {"],
  [272, "        <span class=\"sym-6991 sym\">keys</span>.add(<span class=\"sym-7062 sym\">iteratorExchange</span>.getKey().indexTo(-<span class=\"c\">1</span>).decode());"],
  [273, "      }"],
  [274, "      <span class=\"k\">return </span><span class=\"sym-6991 sym\">keys</span>;"],
  [275, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-7392 sym\">e</span>) {"],
  [276, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to get keys from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-7392 sym\">e</span>);"],
  [277, "    }"],
  [278, "  }"],
  [279, ""],
  [280, "  <span class=\"cppd\">/**</span>"],
  [281, "<span class=\"cppd\">   * Returns the set of keys associated with this cache.</span>"],
  [282, "<span class=\"cppd\">   *</span>"],
  [283, "<span class=\"cppd\">   * @return The set containing the keys for this cache.</span>"],
  [284, "<span class=\"cppd\">   */</span>"],
  [285, "  <span class=\"k\">public </span><span class=\"sym-1305 sym\">Set</span>&lt;Object&gt; <span class=\"sym-7641 sym\">keySet</span>() {"],
  [286, "    <span class=\"k\">try </span>{"],
  [287, "      <span class=\"sym-1305 sym\">Set</span>&lt;Object&gt; <span class=\"sym-7680 sym\">keys</span> = <span class=\"sym-949 sym\">Sets</span>.newLinkedHashSet();"],
  [288, "      <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [289, "      <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-7751 sym\">iteratorExchange</span> = <span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>);"],
  [290, "      <span class=\"sym-7751 sym\">iteratorExchange</span>.append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [291, "      <span class=\"k\">while </span>(<span class=\"sym-7751 sym\">iteratorExchange</span>.next(<span class=\"k\">false</span>)) {"],
  [292, "        <span class=\"sym-7680 sym\">keys</span>.add(<span class=\"sym-7751 sym\">iteratorExchange</span>.getKey().indexTo(-<span class=\"c\">1</span>).decode());"],
  [293, "      }"],
  [294, "      <span class=\"k\">return </span><span class=\"sym-7680 sym\">keys</span>;"],
  [295, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-7998 sym\">e</span>) {"],
  [296, "      <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to get keys from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-7998 sym\">e</span>);"],
  [297, "    }"],
  [298, "  }"],
  [299, ""],
  [300, "  <span class=\"cppd\">/**</span>"],
  [301, "<span class=\"cppd\">   * Lazy-loading values for given keys</span>"],
  [302, "<span class=\"cppd\">   */</span>"],
  [303, "  <span class=\"k\">public </span>Iterable&lt;V&gt; <span class=\"sym-8168 sym\">values</span>(Object <span class=\"sym-8182 sym\">firstKey</span>, Object <span class=\"sym-8199 sym\">secondKey</span>) {"],
  [304, "    <span class=\"k\">try </span>{"],
  [305, "      <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [306, "      <span class=\"sym-1522 sym\">exchange</span>.append(<span class=\"sym-8182 sym\">firstKey</span>).append(<span class=\"sym-8199 sym\">secondKey</span>).append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [307, "      <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-8331 sym\">iteratorExchange</span> = <span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>);"],
  [308, "      <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-8390 sym\">filter</span> = <span class=\"k\">new </span><span class=\"sym-1033 sym\">KeyFilter</span>().append(<span class=\"sym-1033 sym\">KeyFilter</span>.simpleTerm(<span class=\"sym-8182 sym\">firstKey</span>)).append(<span class=\"sym-1033 sym\">KeyFilter</span>.simpleTerm(<span class=\"sym-8199 sym\">secondKey</span>));"],
  [309, "      <span class=\"k\">return </span><span class=\"k\">new </span><span class=\"sym-10646 sym\">ValueIterable</span>&lt;V&gt;(<span class=\"sym-8331 sym\">iteratorExchange</span>, <span class=\"sym-8390 sym\">filter</span>);"],
  [310, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-8579 sym\">e</span>) {"],
  [311, "      <span class=\"k\">throw </span><span class=\"sym-8659 sym\">failToGetValues</span>(<span class=\"sym-8579 sym\">e</span>);"],
  [312, "    }"],
  [313, "  }"],
  [314, ""],
  [315, "  <span class=\"k\">private </span>IllegalStateException <span class=\"sym-8659 sym\">failToGetValues</span>(Exception <span class=\"sym-8685 sym\">e</span>) {"],
  [316, "    <span class=\"k\">return </span><span class=\"k\">new </span>IllegalStateException(<span class=\"s\">\"Fail to get values from cache \" </span>+ <span class=\"sym-1491 sym\">name</span>, <span class=\"sym-8685 sym\">e</span>);"],
  [317, "  }"],
  [318, ""],
  [319, "  <span class=\"cppd\">/**</span>"],
  [320, "<span class=\"cppd\">   * Lazy-loading values for a given key</span>"],
  [321, "<span class=\"cppd\">   */</span>"],
  [322, "  <span class=\"k\">public </span>Iterable&lt;V&gt; <span class=\"sym-8851 sym\">values</span>(Object <span class=\"sym-8865 sym\">firstKey</span>) {"],
  [323, "    <span class=\"k\">try </span>{"],
  [324, "      <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [325, "      <span class=\"sym-1522 sym\">exchange</span>.append(<span class=\"sym-8865 sym\">firstKey</span>).append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [326, "      <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-8978 sym\">iteratorExchange</span> = <span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>);"],
  [327, "      <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-9037 sym\">filter</span> = <span class=\"k\">new </span><span class=\"sym-1033 sym\">KeyFilter</span>().append(<span class=\"sym-1033 sym\">KeyFilter</span>.simpleTerm(<span class=\"sym-8865 sym\">firstKey</span>));"],
  [328, "      <span class=\"k\">return </span><span class=\"k\">new </span><span class=\"sym-10646 sym\">ValueIterable</span>&lt;V&gt;(<span class=\"sym-8978 sym\">iteratorExchange</span>, <span class=\"sym-9037 sym\">filter</span>);"],
  [329, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-9186 sym\">e</span>) {"],
  [330, "      <span class=\"k\">throw </span><span class=\"sym-8659 sym\">failToGetValues</span>(<span class=\"sym-9186 sym\">e</span>);"],
  [331, "    }"],
  [332, "  }"],
  [333, ""],
  [334, "  <span class=\"cppd\">/**</span>"],
  [335, "<span class=\"cppd\">   * Lazy-loading values</span>"],
  [336, "<span class=\"cppd\">   */</span>"],
  [337, "  <span class=\"k\">public </span>Iterable&lt;V&gt; <span class=\"sym-9292 sym\">values</span>() {"],
  [338, "    <span class=\"k\">try </span>{"],
  [339, "      <span class=\"sym-1522 sym\">exchange</span>.clear().append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [340, "      <span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-9371 sym\">iteratorExchange</span> = <span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>);"],
  [341, "      <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-9430 sym\">filter</span> = <span class=\"k\">new </span><span class=\"sym-1033 sym\">KeyFilter</span>().append(<span class=\"sym-1033 sym\">KeyFilter</span>.ALL);"],
  [342, "      <span class=\"k\">return </span><span class=\"k\">new </span><span class=\"sym-10646 sym\">ValueIterable</span>&lt;V&gt;(<span class=\"sym-9371 sym\">iteratorExchange</span>, <span class=\"sym-9430 sym\">filter</span>);"],
  [343, "    } <span class=\"k\">catch </span>(Exception <span class=\"sym-9562 sym\">e</span>) {"],
  [344, "      <span class=\"k\">throw </span><span class=\"sym-8659 sym\">failToGetValues</span>(<span class=\"sym-9562 sym\">e</span>);"],
  [345, "    }"],
  [346, "  }"],
  [347, ""],
  [348, "  <span class=\"k\">public </span>Iterable&lt;<span class=\"sym-13607 sym\">Entry</span>&lt;V&gt;&gt; <span class=\"sym-9638 sym\">entries</span>() {"],
  [349, "    <span class=\"sym-1522 sym\">exchange</span>.clear().to(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [350, "    <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-9701 sym\">filter</span> = <span class=\"k\">new </span><span class=\"sym-1033 sym\">KeyFilter</span>().append(<span class=\"sym-1033 sym\">KeyFilter</span>.ALL);"],
  [351, "    <span class=\"k\">return </span><span class=\"k\">new </span><span class=\"sym-11992 sym\">EntryIterable</span>&lt;V&gt;(<span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>), <span class=\"sym-9701 sym\">filter</span>);"],
  [352, "  }"],
  [353, ""],
  [354, "  <span class=\"k\">public </span>Iterable&lt;<span class=\"sym-13607 sym\">Entry</span>&lt;V&gt;&gt; <span class=\"sym-9847 sym\">entries</span>(Object <span class=\"sym-9862 sym\">firstKey</span>) {"],
  [355, "    <span class=\"sym-1522 sym\">exchange</span>.clear().append(<span class=\"sym-9862 sym\">firstKey</span>).append(<span class=\"sym-1007 sym\">Key</span>.BEFORE);"],
  [356, "    <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-9946 sym\">filter</span> = <span class=\"k\">new </span><span class=\"sym-1033 sym\">KeyFilter</span>().append(<span class=\"sym-1033 sym\">KeyFilter</span>.simpleTerm(<span class=\"sym-9862 sym\">firstKey</span>));"],
  [357, "    <span class=\"k\">return </span><span class=\"k\">new </span><span class=\"sym-11992 sym\">EntryIterable</span>&lt;V&gt;(<span class=\"k\">new </span><span class=\"sym-976 sym\">Exchange</span>(<span class=\"sym-1522 sym\">exchange</span>), <span class=\"sym-9946 sym\">filter</span>);"],
  [358, "  }"],
  [359, ""],
  [360, "  <span class=\"k\">private </span><span class=\"k\">void </span><span class=\"sym-10096 sym\">resetKey</span>(Object <span class=\"sym-10112 sym\">key</span>) {"],
  [361, "    <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [362, "    <span class=\"sym-1522 sym\">exchange</span>.append(<span class=\"sym-10112 sym\">key</span>);"],
  [363, "  }"],
  [364, ""],
  [365, "  <span class=\"k\">private </span><span class=\"k\">void </span><span class=\"sym-10187 sym\">resetKey</span>(Object <span class=\"sym-10203 sym\">first</span>, Object <span class=\"sym-10217 sym\">second</span>) {"],
  [366, "    <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [367, "    <span class=\"sym-1522 sym\">exchange</span>.append(<span class=\"sym-10203 sym\">first</span>).append(<span class=\"sym-10217 sym\">second</span>);"],
  [368, "  }"],
  [369, ""],
  [370, "  <span class=\"k\">private </span><span class=\"k\">void </span><span class=\"sym-10312 sym\">resetKey</span>(Object <span class=\"sym-10328 sym\">first</span>, Object <span class=\"sym-10342 sym\">second</span>, Object <span class=\"sym-10357 sym\">third</span>) {"],
  [371, "    <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [372, "    <span class=\"sym-1522 sym\">exchange</span>.append(<span class=\"sym-10328 sym\">first</span>).append(<span class=\"sym-10342 sym\">second</span>).append(<span class=\"sym-10357 sym\">third</span>);"],
  [373, "  }"],
  [374, ""],
  [375, "  <span class=\"k\">private </span><span class=\"k\">void </span><span class=\"sym-10465 sym\">resetKey</span>(Object[] <span class=\"sym-10483 sym\">keys</span>) {"],
  [376, "    <span class=\"sym-1522 sym\">exchange</span>.clear();"],
  [377, "    <span class=\"k\">for </span>(Object <span class=\"sym-10529 sym\">o</span> : <span class=\"sym-10483 sym\">keys</span>) {"],
  [378, "      <span class=\"sym-1522 sym\">exchange</span>.append(<span class=\"sym-10529 sym\">o</span>);"],
  [379, "    }"],
  [380, "  }"],
  [381, ""],
  [382, "  <span class=\"cppd\">//</span>"],
  [383, "  <span class=\"cppd\">// LAZY ITERATORS AND ITERABLES</span>"],
  [384, "  <span class=\"cppd\">//</span>"],
  [385, ""],
  [386, "  <span class=\"k\">private </span><span class=\"k\">static </span><span class=\"k\">class </span><span class=\"sym-10646 sym\">ValueIterable</span>&lt;T <span class=\"k\">extends </span>Serializable&gt; <span class=\"k\">implements </span>Iterable&lt;T&gt; {"],
  [387, "    <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-1237 sym\">Iterator</span>&lt;T&gt; <span class=\"sym-10739 sym\">iterator</span>;"],
  [388, ""],
  [389, "    <span class=\"k\">private </span><span class=\"sym-10762 sym\">ValueIterable</span>(<span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-10785 sym\">exchange</span>, <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-10805 sym\">keyFilter</span>) {"],
  [390, "      <span class=\"k\">this</span>.<span class=\"sym-10739 sym\">iterator</span> = <span class=\"k\">new </span><span class=\"sym-10997 sym\">ValueIterator</span>&lt;T&gt;(<span class=\"sym-10785 sym\">exchange</span>, <span class=\"sym-10805 sym\">keyFilter</span>);"],
  [391, "    }"],
  [392, ""],
  [393, "    <span class=\"a\">@Override</span>"],
  [394, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"sym-1237 sym\">Iterator</span>&lt;T&gt; <span class=\"sym-10927 sym\">iterator</span>() {"],
  [395, "      <span class=\"k\">return </span><span class=\"sym-10739 sym\">iterator</span>;"],
  [396, "    }"],
  [397, "  }"],
  [398, ""],
  [399, "  <span class=\"k\">private </span><span class=\"k\">static </span><span class=\"k\">class </span><span class=\"sym-10997 sym\">ValueIterator</span>&lt;T <span class=\"k\">extends </span>Serializable&gt; <span class=\"k\">implements </span><span class=\"sym-1237 sym\">Iterator</span>&lt;T&gt; {"],
  [400, "    <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-11087 sym\">exchange</span>;"],
  [401, "    <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-11125 sym\">keyFilter</span>;"],
  [402, ""],
  [403, "    <span class=\"k\">private </span><span class=\"sym-11149 sym\">ValueIterator</span>(<span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-11172 sym\">exchange</span>, <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-11192 sym\">keyFilter</span>) {"],
  [404, "      <span class=\"k\">this</span>.<span class=\"sym-11087 sym\">exchange</span> = <span class=\"sym-11172 sym\">exchange</span>;"],
  [405, "      <span class=\"k\">this</span>.<span class=\"sym-11125 sym\">keyFilter</span> = <span class=\"sym-11192 sym\">keyFilter</span>;"],
  [406, "    }"],
  [407, ""],
  [408, "    <span class=\"a\">@Override</span>"],
  [409, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-11311 sym\">hasNext</span>() {"],
  [410, "      <span class=\"k\">try </span>{"],
  [411, "        <span class=\"k\">return </span><span class=\"sym-11087 sym\">exchange</span>.hasNext(<span class=\"sym-11125 sym\">keyFilter</span>);"],
  [412, "      } <span class=\"k\">catch </span>(<span class=\"sym-1075 sym\">PersistitException</span> <span class=\"sym-11413 sym\">e</span>) {"],
  [413, "        <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"sym-11413 sym\">e</span>);"],
  [414, "      }"],
  [415, "    }"],
  [416, ""],
  [417, "    <span class=\"a\">@SuppressWarnings</span>(<span class=\"s\">\"unchecked\"</span>)"],
  [418, "    <span class=\"a\">@Override</span>"],
  [419, "<span class=\"a\">    </span><span class=\"k\">public </span>T <span class=\"sym-11539 sym\">next</span>() {"],
  [420, "      <span class=\"k\">try </span>{"],
  [421, "        <span class=\"sym-11087 sym\">exchange</span>.next(<span class=\"sym-11125 sym\">keyFilter</span>);"],
  [422, "      } <span class=\"k\">catch </span>(<span class=\"sym-1075 sym\">PersistitException</span> <span class=\"sym-11628 sym\">e</span>) {"],
  [423, "        <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"sym-11628 sym\">e</span>);"],
  [424, "      }"],
  [425, "      <span class=\"k\">if </span>(<span class=\"sym-11087 sym\">exchange</span>.getValue().isDefined()) {"],
  [426, "        <span class=\"k\">return </span>(T) <span class=\"sym-11087 sym\">exchange</span>.getValue().get();"],
  [427, "      }"],
  [428, "      <span class=\"k\">throw </span><span class=\"k\">new </span><span class=\"sym-1264 sym\">NoSuchElementException</span>();"],
  [429, "    }"],
  [430, ""],
  [431, "    <span class=\"a\">@Override</span>"],
  [432, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"k\">void </span><span class=\"sym-11863 sym\">remove</span>() {"],
  [433, "      <span class=\"k\">throw </span><span class=\"k\">new </span>UnsupportedOperationException(<span class=\"s\">\"Removing an item is not supported\"</span>);"],
  [434, "    }"],
  [435, "  }"],
  [436, ""],
  [437, "  <span class=\"k\">private </span><span class=\"k\">static </span><span class=\"k\">class </span><span class=\"sym-11992 sym\">EntryIterable</span>&lt;T <span class=\"k\">extends </span>Serializable&gt; <span class=\"k\">implements </span>Iterable&lt;<span class=\"sym-13607 sym\">Entry</span>&lt;T&gt;&gt; {"],
  [438, "    <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-12339 sym\">EntryIterator</span>&lt;T&gt; <span class=\"sym-12097 sym\">it</span>;"],
  [439, ""],
  [440, "    <span class=\"k\">private </span><span class=\"sym-12114 sym\">EntryIterable</span>(<span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-12137 sym\">exchange</span>, <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-12157 sym\">keyFilter</span>) {"],
  [441, "      <span class=\"sym-12097 sym\">it</span> = <span class=\"k\">new </span><span class=\"sym-12339 sym\">EntryIterator</span>&lt;T&gt;(<span class=\"sym-12137 sym\">exchange</span>, <span class=\"sym-12157 sym\">keyFilter</span>);"],
  [442, "    }"],
  [443, ""],
  [444, "    <span class=\"a\">@Override</span>"],
  [445, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"sym-1237 sym\">Iterator</span>&lt;<span class=\"sym-13607 sym\">Entry</span>&lt;T&gt;&gt; <span class=\"sym-12275 sym\">iterator</span>() {"],
  [446, "      <span class=\"k\">return </span><span class=\"sym-12097 sym\">it</span>;"],
  [447, "    }"],
  [448, "  }"],
  [449, ""],
  [450, "  <span class=\"k\">private </span><span class=\"k\">static </span><span class=\"k\">class </span><span class=\"sym-12339 sym\">EntryIterator</span>&lt;T <span class=\"k\">extends </span>Serializable&gt; <span class=\"k\">implements </span><span class=\"sym-1237 sym\">Iterator</span>&lt;<span class=\"sym-13607 sym\">Entry</span>&lt;T&gt;&gt; {"],
  [451, "    <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-12436 sym\">exchange</span>;"],
  [452, "    <span class=\"k\">private </span><span class=\"k\">final </span><span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-12474 sym\">keyFilter</span>;"],
  [453, ""],
  [454, "    <span class=\"k\">private </span><span class=\"sym-12498 sym\">EntryIterator</span>(<span class=\"sym-976 sym\">Exchange</span> <span class=\"sym-12521 sym\">exchange</span>, <span class=\"sym-1033 sym\">KeyFilter</span> <span class=\"sym-12541 sym\">keyFilter</span>) {"],
  [455, "      <span class=\"k\">this</span>.<span class=\"sym-12436 sym\">exchange</span> = <span class=\"sym-12521 sym\">exchange</span>;"],
  [456, "      <span class=\"k\">this</span>.<span class=\"sym-12474 sym\">keyFilter</span> = <span class=\"sym-12541 sym\">keyFilter</span>;"],
  [457, "    }"],
  [458, ""],
  [459, "    <span class=\"a\">@Override</span>"],
  [460, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"k\">boolean </span><span class=\"sym-12660 sym\">hasNext</span>() {"],
  [461, "      <span class=\"k\">try </span>{"],
  [462, "        <span class=\"k\">return </span><span class=\"sym-12436 sym\">exchange</span>.hasNext(<span class=\"sym-12474 sym\">keyFilter</span>);"],
  [463, "      } <span class=\"k\">catch </span>(<span class=\"sym-1075 sym\">PersistitException</span> <span class=\"sym-12762 sym\">e</span>) {"],
  [464, "        <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"sym-12762 sym\">e</span>);"],
  [465, "      }"],
  [466, "    }"],
  [467, ""],
  [468, "    <span class=\"a\">@SuppressWarnings</span>(<span class=\"s\">\"unchecked\"</span>)"],
  [469, "    <span class=\"a\">@Override</span>"],
  [470, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"sym-13607 sym\">Entry</span>&lt;T&gt; <span class=\"sym-12895 sym\">next</span>() {"],
  [471, "      <span class=\"k\">try </span>{"],
  [472, "        <span class=\"sym-12436 sym\">exchange</span>.next(<span class=\"sym-12474 sym\">keyFilter</span>);"],
  [473, "      } <span class=\"k\">catch </span>(<span class=\"sym-1075 sym\">PersistitException</span> <span class=\"sym-12984 sym\">e</span>) {"],
  [474, "        <span class=\"k\">throw </span><span class=\"k\">new </span>IllegalStateException(<span class=\"sym-12984 sym\">e</span>);"],
  [475, "      }"],
  [476, "      <span class=\"k\">if </span>(<span class=\"sym-12436 sym\">exchange</span>.getValue().isDefined()) {"],
  [477, "        T <span class=\"sym-13096 sym\">value</span> = (T) <span class=\"sym-12436 sym\">exchange</span>.getValue().get();"],
  [478, "        <span class=\"sym-1007 sym\">Key</span> <span class=\"sym-13147 sym\">key</span> = <span class=\"sym-12436 sym\">exchange</span>.getKey();"],
  [479, "        Object[] <span class=\"sym-13189 sym\">array</span> = <span class=\"k\">new </span>Object[<span class=\"sym-13147 sym\">key</span>.getDepth()];"],
  [480, "        <span class=\"k\">for </span>(<span class=\"k\">int </span><span class=\"sym-13242 sym\">i</span> = <span class=\"c\">0</span>; <span class=\"sym-13242 sym\">i</span> &lt; <span class=\"sym-13147 sym\">key</span>.getDepth(); <span class=\"sym-13242 sym\">i</span>++) {"],
  [481, "          <span class=\"sym-13189 sym\">array</span>[<span class=\"sym-13242 sym\">i</span>] = <span class=\"sym-13147 sym\">key</span>.indexTo(<span class=\"sym-13242 sym\">i</span> - <span class=\"sym-13147 sym\">key</span>.getDepth()).decode();"],
  [482, "        }"],
  [483, "        <span class=\"k\">return </span><span class=\"k\">new </span><span class=\"sym-13607 sym\">Entry</span>&lt;T&gt;(<span class=\"sym-13189 sym\">array</span>, <span class=\"sym-13096 sym\">value</span>);"],
  [484, "      }"],
  [485, "      <span class=\"k\">throw </span><span class=\"k\">new </span><span class=\"sym-1264 sym\">NoSuchElementException</span>();"],
  [486, "    }"],
  [487, ""],
  [488, "    <span class=\"a\">@Override</span>"],
  [489, "<span class=\"a\">    </span><span class=\"k\">public </span><span class=\"k\">void </span><span class=\"sym-13479 sym\">remove</span>() {"],
  [490, "      <span class=\"k\">throw </span><span class=\"k\">new </span>UnsupportedOperationException(<span class=\"s\">\"Removing an item is not supported\"</span>);"],
  [491, "    }"],
  [492, "  }"],
  [493, ""],
  [494, "  <span class=\"k\">public </span><span class=\"k\">static </span><span class=\"k\">class </span><span class=\"sym-13607 sym\">Entry</span>&lt;V <span class=\"k\">extends </span>Serializable&gt; {"],
  [495, "    <span class=\"k\">private </span><span class=\"k\">final </span>Object[] <span class=\"sym-13666 sym\">key</span>;"],
  [496, "    <span class=\"k\">private </span><span class=\"k\">final </span>V <span class=\"sym-13691 sym\">value</span>;"],
  [497, ""],
  [498, "    <span class=\"sym-13703 sym\">Entry</span>(Object[] <span class=\"sym-13718 sym\">key</span>, V <span class=\"sym-13725 sym\">value</span>) {"],
  [499, "      <span class=\"k\">this</span>.<span class=\"sym-13666 sym\">key</span> = <span class=\"sym-13718 sym\">key</span>;"],
  [500, "      <span class=\"k\">this</span>.<span class=\"sym-13691 sym\">value</span> = <span class=\"sym-13725 sym\">value</span>;"],
  [501, "    }"],
  [502, ""],
  [503, "    <span class=\"k\">public </span>Object[] <span class=\"sym-13809 sym\">key</span>() {"],
  [504, "      <span class=\"k\">return </span><span class=\"sym-13666 sym\">key</span>;"],
  [505, "    }"],
  [506, ""],
  [507, "    <span class=\"a\">@<span class=\"sym-1176 sym\">CheckForNull</span></span>"],
  [508, "<span class=\"a\">    </span><span class=\"k\">public </span>V <span class=\"sym-13873 sym\">value</span>() {"],
  [509, "      <span class=\"k\">return </span><span class=\"sym-13691 sym\">value</span>;"],
  [510, "    }"],
  [511, ""],
  [512, "    <span class=\"a\">@Override</span>"],
  [513, "<span class=\"a\">    </span><span class=\"k\">public </span>String <span class=\"sym-13942 sym\">toString</span>() {"],
  [514, "      <span class=\"k\">return </span><span class=\"sym-1134 sym\">ToStringBuilder</span>.reflectionToString(<span class=\"k\">this</span>);"],
  [515, "    }"],
  [516, "  }"],
  [517, ""],
  [518, "}"],
  [519, ""]
]}
