/*
 * SonarQube, open source software quality management tool.
 * Copyright (C) 2008-2014 SonarSource
 * mailto:contact AT sonarsource DOT com
 *
 * SonarQube is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * SonarQube is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software Foundation,
 * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package org.sonar.server.computation;

import com.google.common.base.Optional;
import org.sonar.db.ce.CeActivityDto;

/**
 * Queue of pending Compute Engine tasks. Both producer and consumer actions
 * are implemented.
 * <p>
 *   This class is decoupled from the regular task type {@link org.sonar.db.ce.CeTaskTypes#REPORT}.
 * </p>
 */
public interface CeQueue {
  /**
   * Build an instance of {@link CeTaskSubmit} required for {@link #submit(CeTaskSubmit)}. It allows
   * to enforce that task ids are generated by the queue. It's used also for having access
   * to the id before submitting the task to the queue.
   */
  CeTaskSubmit.Builder prepareSubmit();

  /**
   * Submits a task to the queue. The task is processed asynchronously.
   * If submits are paused (see {@link #isSubmitPaused()}, then an
   * unchecked exception is thrown.
   */
  CeTask submit(CeTaskSubmit submission);

  /**
   * Peek the oldest task in status {@link org.sonar.db.ce.CeQueueDto.Status#PENDING}.
   * The task status is changed to {@link org.sonar.db.ce.CeQueueDto.Status#IN_PROGRESS}.
   * Does not return anything if the queue is paused (see {@link #isPeekPaused()}.
   *
   * <p>Only a single task can be peeked by project.</p>
   *
   * <p>An unchecked exception may be thrown on technical errors (db connection, ...).</p>
   */
  Optional<CeTask> peek();

  /**
   * Cancels a task in status {@link org.sonar.db.ce.CeQueueDto.Status#PENDING}. An unchecked
   * exception is thrown if the status is not {@link org.sonar.db.ce.CeQueueDto.Status#PENDING}.
   * The method does nothing and returns {@code false} if the task does not exist.
   *
   * @return true if the task exists and is successfully canceled.
   */
  boolean cancel(String taskUuid);

  /**
   * Removes all the tasks from the queue, whatever their status. They are marked
   * as {@link org.sonar.db.ce.CeActivityDto.Status#CANCELED} in past activity.
   * This method can NOT be called when  workers are being executed, as in progress
   * tasks can't be killed.
   *
   * @return the number of canceled tasks
   */
  int clear();

  /**
   * Similar as {@link #clear()}, except that the tasks with status
   * {@link org.sonar.db.ce.CeQueueDto.Status#IN_PROGRESS} are ignored. This method
   * can be called at runtime, even if workers are being executed.
   *
   * @return the number of canceled tasks
   */
  int cancelAll();

  /**
   * Removes a task from the queue and registers it to past activities. This method
   * is called by Compute Engine workers when task is processed.
   *
   * <p>An unchecked exception is thrown if the task does not exist in the queue.</p>
   */
  void remove(CeTask task, CeActivityDto.Status status);

  void pauseSubmit();

  void resumeSubmit();

  boolean isSubmitPaused();

  void pausePeek();

  void resumePeek();

  boolean isPeekPaused();
}
