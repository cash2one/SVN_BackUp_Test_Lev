/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ThriftHive_H
#define ThriftHive_H

#include <thrift/TDispatchProcessor.h>
#include "hive_service_types.h"
#include "ThriftHiveMetastore.h"

namespace Apache { namespace Hadoop { namespace Hive {

class ThriftHiveIf : virtual public  ::Apache::Hadoop::Hive::ThriftHiveMetastoreIf {
 public:
  virtual ~ThriftHiveIf() {}
  virtual void execute(const std::string& query) = 0;
  virtual void fetchOne(std::string& _return) = 0;
  virtual void fetchN(std::vector<std::string> & _return, const int32_t numRows) = 0;
  virtual void fetchAll(std::vector<std::string> & _return) = 0;
  virtual void getSchema( ::Apache::Hadoop::Hive::Schema& _return) = 0;
  virtual void getThriftSchema( ::Apache::Hadoop::Hive::Schema& _return) = 0;
  virtual void getClusterStatus(HiveClusterStatus& _return) = 0;
  virtual void getQueryPlan( ::Apache::Hadoop::Hive::QueryPlan& _return) = 0;
  virtual void clean() = 0;
};

class ThriftHiveIfFactory : virtual public  ::Apache::Hadoop::Hive::ThriftHiveMetastoreIfFactory {
 public:
  typedef ThriftHiveIf Handler;

  virtual ~ThriftHiveIfFactory() {}

  virtual ThriftHiveIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler( ::facebook::fb303::FacebookServiceIf* /* handler */) = 0;
};

class ThriftHiveIfSingletonFactory : virtual public ThriftHiveIfFactory {
 public:
  ThriftHiveIfSingletonFactory(const boost::shared_ptr<ThriftHiveIf>& iface) : iface_(iface) {}
  virtual ~ThriftHiveIfSingletonFactory() {}

  virtual ThriftHiveIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler( ::facebook::fb303::FacebookServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<ThriftHiveIf> iface_;
};

class ThriftHiveNull : virtual public ThriftHiveIf , virtual public  ::Apache::Hadoop::Hive::ThriftHiveMetastoreNull {
 public:
  virtual ~ThriftHiveNull() {}
  void execute(const std::string& /* query */) {
    return;
  }
  void fetchOne(std::string& /* _return */) {
    return;
  }
  void fetchN(std::vector<std::string> & /* _return */, const int32_t /* numRows */) {
    return;
  }
  void fetchAll(std::vector<std::string> & /* _return */) {
    return;
  }
  void getSchema( ::Apache::Hadoop::Hive::Schema& /* _return */) {
    return;
  }
  void getThriftSchema( ::Apache::Hadoop::Hive::Schema& /* _return */) {
    return;
  }
  void getClusterStatus(HiveClusterStatus& /* _return */) {
    return;
  }
  void getQueryPlan( ::Apache::Hadoop::Hive::QueryPlan& /* _return */) {
    return;
  }
  void clean() {
    return;
  }
};

typedef struct _ThriftHive_execute_args__isset {
  _ThriftHive_execute_args__isset() : query(false) {}
  bool query :1;
} _ThriftHive_execute_args__isset;

class ThriftHive_execute_args {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  ThriftHive_execute_args(const ThriftHive_execute_args&);
  ThriftHive_execute_args& operator=(const ThriftHive_execute_args&);
  ThriftHive_execute_args() : query() {
  }

  virtual ~ThriftHive_execute_args() throw();
  std::string query;

  _ThriftHive_execute_args__isset __isset;

  void __set_query(const std::string& val);

  bool operator == (const ThriftHive_execute_args & rhs) const
  {
    if (!(query == rhs.query))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_execute_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_execute_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_execute_args& obj);
};


class ThriftHive_execute_pargs {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};


  virtual ~ThriftHive_execute_pargs() throw();
  const std::string* query;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_execute_pargs& obj);
};

typedef struct _ThriftHive_execute_result__isset {
  _ThriftHive_execute_result__isset() : ex(false) {}
  bool ex :1;
} _ThriftHive_execute_result__isset;

class ThriftHive_execute_result {
 public:

  static const char* ascii_fingerprint; // = "6AC6FD61CA5E3524E0174B0B96D6F9C0";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xC6,0xFD,0x61,0xCA,0x5E,0x35,0x24,0xE0,0x17,0x4B,0x0B,0x96,0xD6,0xF9,0xC0};

  ThriftHive_execute_result(const ThriftHive_execute_result&);
  ThriftHive_execute_result& operator=(const ThriftHive_execute_result&);
  ThriftHive_execute_result() {
  }

  virtual ~ThriftHive_execute_result() throw();
  HiveServerException ex;

  _ThriftHive_execute_result__isset __isset;

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_execute_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_execute_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_execute_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_execute_result& obj);
};

typedef struct _ThriftHive_execute_presult__isset {
  _ThriftHive_execute_presult__isset() : ex(false) {}
  bool ex :1;
} _ThriftHive_execute_presult__isset;

class ThriftHive_execute_presult {
 public:

  static const char* ascii_fingerprint; // = "6AC6FD61CA5E3524E0174B0B96D6F9C0";
  static const uint8_t binary_fingerprint[16]; // = {0x6A,0xC6,0xFD,0x61,0xCA,0x5E,0x35,0x24,0xE0,0x17,0x4B,0x0B,0x96,0xD6,0xF9,0xC0};


  virtual ~ThriftHive_execute_presult() throw();
  HiveServerException ex;

  _ThriftHive_execute_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_execute_presult& obj);
};


class ThriftHive_fetchOne_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_fetchOne_args(const ThriftHive_fetchOne_args&);
  ThriftHive_fetchOne_args& operator=(const ThriftHive_fetchOne_args&);
  ThriftHive_fetchOne_args() {
  }

  virtual ~ThriftHive_fetchOne_args() throw();

  bool operator == (const ThriftHive_fetchOne_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_fetchOne_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_fetchOne_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchOne_args& obj);
};


class ThriftHive_fetchOne_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_fetchOne_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchOne_pargs& obj);
};

typedef struct _ThriftHive_fetchOne_result__isset {
  _ThriftHive_fetchOne_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_fetchOne_result__isset;

class ThriftHive_fetchOne_result {
 public:

  static const char* ascii_fingerprint; // = "BD5C3537D3AE5C0248BD3B45C053AE32";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x5C,0x35,0x37,0xD3,0xAE,0x5C,0x02,0x48,0xBD,0x3B,0x45,0xC0,0x53,0xAE,0x32};

  ThriftHive_fetchOne_result(const ThriftHive_fetchOne_result&);
  ThriftHive_fetchOne_result& operator=(const ThriftHive_fetchOne_result&);
  ThriftHive_fetchOne_result() : success() {
  }

  virtual ~ThriftHive_fetchOne_result() throw();
  std::string success;
  HiveServerException ex;

  _ThriftHive_fetchOne_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_fetchOne_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_fetchOne_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_fetchOne_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchOne_result& obj);
};

typedef struct _ThriftHive_fetchOne_presult__isset {
  _ThriftHive_fetchOne_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_fetchOne_presult__isset;

class ThriftHive_fetchOne_presult {
 public:

  static const char* ascii_fingerprint; // = "BD5C3537D3AE5C0248BD3B45C053AE32";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x5C,0x35,0x37,0xD3,0xAE,0x5C,0x02,0x48,0xBD,0x3B,0x45,0xC0,0x53,0xAE,0x32};


  virtual ~ThriftHive_fetchOne_presult() throw();
  std::string* success;
  HiveServerException ex;

  _ThriftHive_fetchOne_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchOne_presult& obj);
};

typedef struct _ThriftHive_fetchN_args__isset {
  _ThriftHive_fetchN_args__isset() : numRows(false) {}
  bool numRows :1;
} _ThriftHive_fetchN_args__isset;

class ThriftHive_fetchN_args {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};

  ThriftHive_fetchN_args(const ThriftHive_fetchN_args&);
  ThriftHive_fetchN_args& operator=(const ThriftHive_fetchN_args&);
  ThriftHive_fetchN_args() : numRows(0) {
  }

  virtual ~ThriftHive_fetchN_args() throw();
  int32_t numRows;

  _ThriftHive_fetchN_args__isset __isset;

  void __set_numRows(const int32_t val);

  bool operator == (const ThriftHive_fetchN_args & rhs) const
  {
    if (!(numRows == rhs.numRows))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_fetchN_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_fetchN_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchN_args& obj);
};


class ThriftHive_fetchN_pargs {
 public:

  static const char* ascii_fingerprint; // = "E86CACEB22240450EDCBEFC3A83970E4";
  static const uint8_t binary_fingerprint[16]; // = {0xE8,0x6C,0xAC,0xEB,0x22,0x24,0x04,0x50,0xED,0xCB,0xEF,0xC3,0xA8,0x39,0x70,0xE4};


  virtual ~ThriftHive_fetchN_pargs() throw();
  const int32_t* numRows;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchN_pargs& obj);
};

typedef struct _ThriftHive_fetchN_result__isset {
  _ThriftHive_fetchN_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_fetchN_result__isset;

class ThriftHive_fetchN_result {
 public:

  static const char* ascii_fingerprint; // = "EB142A6BE66D8EE6065D07106EABD55D";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x14,0x2A,0x6B,0xE6,0x6D,0x8E,0xE6,0x06,0x5D,0x07,0x10,0x6E,0xAB,0xD5,0x5D};

  ThriftHive_fetchN_result(const ThriftHive_fetchN_result&);
  ThriftHive_fetchN_result& operator=(const ThriftHive_fetchN_result&);
  ThriftHive_fetchN_result() {
  }

  virtual ~ThriftHive_fetchN_result() throw();
  std::vector<std::string>  success;
  HiveServerException ex;

  _ThriftHive_fetchN_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_fetchN_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_fetchN_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_fetchN_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchN_result& obj);
};

typedef struct _ThriftHive_fetchN_presult__isset {
  _ThriftHive_fetchN_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_fetchN_presult__isset;

class ThriftHive_fetchN_presult {
 public:

  static const char* ascii_fingerprint; // = "EB142A6BE66D8EE6065D07106EABD55D";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x14,0x2A,0x6B,0xE6,0x6D,0x8E,0xE6,0x06,0x5D,0x07,0x10,0x6E,0xAB,0xD5,0x5D};


  virtual ~ThriftHive_fetchN_presult() throw();
  std::vector<std::string> * success;
  HiveServerException ex;

  _ThriftHive_fetchN_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchN_presult& obj);
};


class ThriftHive_fetchAll_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_fetchAll_args(const ThriftHive_fetchAll_args&);
  ThriftHive_fetchAll_args& operator=(const ThriftHive_fetchAll_args&);
  ThriftHive_fetchAll_args() {
  }

  virtual ~ThriftHive_fetchAll_args() throw();

  bool operator == (const ThriftHive_fetchAll_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_fetchAll_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_fetchAll_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchAll_args& obj);
};


class ThriftHive_fetchAll_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_fetchAll_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchAll_pargs& obj);
};

typedef struct _ThriftHive_fetchAll_result__isset {
  _ThriftHive_fetchAll_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_fetchAll_result__isset;

class ThriftHive_fetchAll_result {
 public:

  static const char* ascii_fingerprint; // = "EB142A6BE66D8EE6065D07106EABD55D";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x14,0x2A,0x6B,0xE6,0x6D,0x8E,0xE6,0x06,0x5D,0x07,0x10,0x6E,0xAB,0xD5,0x5D};

  ThriftHive_fetchAll_result(const ThriftHive_fetchAll_result&);
  ThriftHive_fetchAll_result& operator=(const ThriftHive_fetchAll_result&);
  ThriftHive_fetchAll_result() {
  }

  virtual ~ThriftHive_fetchAll_result() throw();
  std::vector<std::string>  success;
  HiveServerException ex;

  _ThriftHive_fetchAll_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_fetchAll_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_fetchAll_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_fetchAll_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchAll_result& obj);
};

typedef struct _ThriftHive_fetchAll_presult__isset {
  _ThriftHive_fetchAll_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_fetchAll_presult__isset;

class ThriftHive_fetchAll_presult {
 public:

  static const char* ascii_fingerprint; // = "EB142A6BE66D8EE6065D07106EABD55D";
  static const uint8_t binary_fingerprint[16]; // = {0xEB,0x14,0x2A,0x6B,0xE6,0x6D,0x8E,0xE6,0x06,0x5D,0x07,0x10,0x6E,0xAB,0xD5,0x5D};


  virtual ~ThriftHive_fetchAll_presult() throw();
  std::vector<std::string> * success;
  HiveServerException ex;

  _ThriftHive_fetchAll_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_fetchAll_presult& obj);
};


class ThriftHive_getSchema_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_getSchema_args(const ThriftHive_getSchema_args&);
  ThriftHive_getSchema_args& operator=(const ThriftHive_getSchema_args&);
  ThriftHive_getSchema_args() {
  }

  virtual ~ThriftHive_getSchema_args() throw();

  bool operator == (const ThriftHive_getSchema_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_getSchema_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getSchema_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getSchema_args& obj);
};


class ThriftHive_getSchema_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_getSchema_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getSchema_pargs& obj);
};

typedef struct _ThriftHive_getSchema_result__isset {
  _ThriftHive_getSchema_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getSchema_result__isset;

class ThriftHive_getSchema_result {
 public:

  static const char* ascii_fingerprint; // = "FCFAE75CC7093F1A3926C2AD58A6FFD1";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0xFA,0xE7,0x5C,0xC7,0x09,0x3F,0x1A,0x39,0x26,0xC2,0xAD,0x58,0xA6,0xFF,0xD1};

  ThriftHive_getSchema_result(const ThriftHive_getSchema_result&);
  ThriftHive_getSchema_result& operator=(const ThriftHive_getSchema_result&);
  ThriftHive_getSchema_result() {
  }

  virtual ~ThriftHive_getSchema_result() throw();
   ::Apache::Hadoop::Hive::Schema success;
  HiveServerException ex;

  _ThriftHive_getSchema_result__isset __isset;

  void __set_success(const  ::Apache::Hadoop::Hive::Schema& val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_getSchema_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_getSchema_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getSchema_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getSchema_result& obj);
};

typedef struct _ThriftHive_getSchema_presult__isset {
  _ThriftHive_getSchema_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getSchema_presult__isset;

class ThriftHive_getSchema_presult {
 public:

  static const char* ascii_fingerprint; // = "FCFAE75CC7093F1A3926C2AD58A6FFD1";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0xFA,0xE7,0x5C,0xC7,0x09,0x3F,0x1A,0x39,0x26,0xC2,0xAD,0x58,0xA6,0xFF,0xD1};


  virtual ~ThriftHive_getSchema_presult() throw();
   ::Apache::Hadoop::Hive::Schema* success;
  HiveServerException ex;

  _ThriftHive_getSchema_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getSchema_presult& obj);
};


class ThriftHive_getThriftSchema_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_getThriftSchema_args(const ThriftHive_getThriftSchema_args&);
  ThriftHive_getThriftSchema_args& operator=(const ThriftHive_getThriftSchema_args&);
  ThriftHive_getThriftSchema_args() {
  }

  virtual ~ThriftHive_getThriftSchema_args() throw();

  bool operator == (const ThriftHive_getThriftSchema_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_getThriftSchema_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getThriftSchema_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getThriftSchema_args& obj);
};


class ThriftHive_getThriftSchema_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_getThriftSchema_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getThriftSchema_pargs& obj);
};

typedef struct _ThriftHive_getThriftSchema_result__isset {
  _ThriftHive_getThriftSchema_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getThriftSchema_result__isset;

class ThriftHive_getThriftSchema_result {
 public:

  static const char* ascii_fingerprint; // = "FCFAE75CC7093F1A3926C2AD58A6FFD1";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0xFA,0xE7,0x5C,0xC7,0x09,0x3F,0x1A,0x39,0x26,0xC2,0xAD,0x58,0xA6,0xFF,0xD1};

  ThriftHive_getThriftSchema_result(const ThriftHive_getThriftSchema_result&);
  ThriftHive_getThriftSchema_result& operator=(const ThriftHive_getThriftSchema_result&);
  ThriftHive_getThriftSchema_result() {
  }

  virtual ~ThriftHive_getThriftSchema_result() throw();
   ::Apache::Hadoop::Hive::Schema success;
  HiveServerException ex;

  _ThriftHive_getThriftSchema_result__isset __isset;

  void __set_success(const  ::Apache::Hadoop::Hive::Schema& val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_getThriftSchema_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_getThriftSchema_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getThriftSchema_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getThriftSchema_result& obj);
};

typedef struct _ThriftHive_getThriftSchema_presult__isset {
  _ThriftHive_getThriftSchema_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getThriftSchema_presult__isset;

class ThriftHive_getThriftSchema_presult {
 public:

  static const char* ascii_fingerprint; // = "FCFAE75CC7093F1A3926C2AD58A6FFD1";
  static const uint8_t binary_fingerprint[16]; // = {0xFC,0xFA,0xE7,0x5C,0xC7,0x09,0x3F,0x1A,0x39,0x26,0xC2,0xAD,0x58,0xA6,0xFF,0xD1};


  virtual ~ThriftHive_getThriftSchema_presult() throw();
   ::Apache::Hadoop::Hive::Schema* success;
  HiveServerException ex;

  _ThriftHive_getThriftSchema_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getThriftSchema_presult& obj);
};


class ThriftHive_getClusterStatus_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_getClusterStatus_args(const ThriftHive_getClusterStatus_args&);
  ThriftHive_getClusterStatus_args& operator=(const ThriftHive_getClusterStatus_args&);
  ThriftHive_getClusterStatus_args() {
  }

  virtual ~ThriftHive_getClusterStatus_args() throw();

  bool operator == (const ThriftHive_getClusterStatus_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_getClusterStatus_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getClusterStatus_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getClusterStatus_args& obj);
};


class ThriftHive_getClusterStatus_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_getClusterStatus_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getClusterStatus_pargs& obj);
};

typedef struct _ThriftHive_getClusterStatus_result__isset {
  _ThriftHive_getClusterStatus_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getClusterStatus_result__isset;

class ThriftHive_getClusterStatus_result {
 public:

  static const char* ascii_fingerprint; // = "F486E00F8F0F2B6A17A0371997BB7B87";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x86,0xE0,0x0F,0x8F,0x0F,0x2B,0x6A,0x17,0xA0,0x37,0x19,0x97,0xBB,0x7B,0x87};

  ThriftHive_getClusterStatus_result(const ThriftHive_getClusterStatus_result&);
  ThriftHive_getClusterStatus_result& operator=(const ThriftHive_getClusterStatus_result&);
  ThriftHive_getClusterStatus_result() {
  }

  virtual ~ThriftHive_getClusterStatus_result() throw();
  HiveClusterStatus success;
  HiveServerException ex;

  _ThriftHive_getClusterStatus_result__isset __isset;

  void __set_success(const HiveClusterStatus& val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_getClusterStatus_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_getClusterStatus_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getClusterStatus_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getClusterStatus_result& obj);
};

typedef struct _ThriftHive_getClusterStatus_presult__isset {
  _ThriftHive_getClusterStatus_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getClusterStatus_presult__isset;

class ThriftHive_getClusterStatus_presult {
 public:

  static const char* ascii_fingerprint; // = "F486E00F8F0F2B6A17A0371997BB7B87";
  static const uint8_t binary_fingerprint[16]; // = {0xF4,0x86,0xE0,0x0F,0x8F,0x0F,0x2B,0x6A,0x17,0xA0,0x37,0x19,0x97,0xBB,0x7B,0x87};


  virtual ~ThriftHive_getClusterStatus_presult() throw();
  HiveClusterStatus* success;
  HiveServerException ex;

  _ThriftHive_getClusterStatus_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getClusterStatus_presult& obj);
};


class ThriftHive_getQueryPlan_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_getQueryPlan_args(const ThriftHive_getQueryPlan_args&);
  ThriftHive_getQueryPlan_args& operator=(const ThriftHive_getQueryPlan_args&);
  ThriftHive_getQueryPlan_args() {
  }

  virtual ~ThriftHive_getQueryPlan_args() throw();

  bool operator == (const ThriftHive_getQueryPlan_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_getQueryPlan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getQueryPlan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getQueryPlan_args& obj);
};


class ThriftHive_getQueryPlan_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_getQueryPlan_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getQueryPlan_pargs& obj);
};

typedef struct _ThriftHive_getQueryPlan_result__isset {
  _ThriftHive_getQueryPlan_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getQueryPlan_result__isset;

class ThriftHive_getQueryPlan_result {
 public:

  static const char* ascii_fingerprint; // = "0263544CFF7194CEE7DC6128DD5941ED";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x63,0x54,0x4C,0xFF,0x71,0x94,0xCE,0xE7,0xDC,0x61,0x28,0xDD,0x59,0x41,0xED};

  ThriftHive_getQueryPlan_result(const ThriftHive_getQueryPlan_result&);
  ThriftHive_getQueryPlan_result& operator=(const ThriftHive_getQueryPlan_result&);
  ThriftHive_getQueryPlan_result() {
  }

  virtual ~ThriftHive_getQueryPlan_result() throw();
   ::Apache::Hadoop::Hive::QueryPlan success;
  HiveServerException ex;

  _ThriftHive_getQueryPlan_result__isset __isset;

  void __set_success(const  ::Apache::Hadoop::Hive::QueryPlan& val);

  void __set_ex(const HiveServerException& val);

  bool operator == (const ThriftHive_getQueryPlan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const ThriftHive_getQueryPlan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_getQueryPlan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getQueryPlan_result& obj);
};

typedef struct _ThriftHive_getQueryPlan_presult__isset {
  _ThriftHive_getQueryPlan_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _ThriftHive_getQueryPlan_presult__isset;

class ThriftHive_getQueryPlan_presult {
 public:

  static const char* ascii_fingerprint; // = "0263544CFF7194CEE7DC6128DD5941ED";
  static const uint8_t binary_fingerprint[16]; // = {0x02,0x63,0x54,0x4C,0xFF,0x71,0x94,0xCE,0xE7,0xDC,0x61,0x28,0xDD,0x59,0x41,0xED};


  virtual ~ThriftHive_getQueryPlan_presult() throw();
   ::Apache::Hadoop::Hive::QueryPlan* success;
  HiveServerException ex;

  _ThriftHive_getQueryPlan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_getQueryPlan_presult& obj);
};


class ThriftHive_clean_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_clean_args(const ThriftHive_clean_args&);
  ThriftHive_clean_args& operator=(const ThriftHive_clean_args&);
  ThriftHive_clean_args() {
  }

  virtual ~ThriftHive_clean_args() throw();

  bool operator == (const ThriftHive_clean_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_clean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_clean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_clean_args& obj);
};


class ThriftHive_clean_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_clean_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_clean_pargs& obj);
};


class ThriftHive_clean_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ThriftHive_clean_result(const ThriftHive_clean_result&);
  ThriftHive_clean_result& operator=(const ThriftHive_clean_result&);
  ThriftHive_clean_result() {
  }

  virtual ~ThriftHive_clean_result() throw();

  bool operator == (const ThriftHive_clean_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ThriftHive_clean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftHive_clean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_clean_result& obj);
};


class ThriftHive_clean_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ThriftHive_clean_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ThriftHive_clean_presult& obj);
};

class ThriftHiveClient : virtual public ThriftHiveIf, public  ::Apache::Hadoop::Hive::ThriftHiveMetastoreClient {
 public:
  ThriftHiveClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
     ::Apache::Hadoop::Hive::ThriftHiveMetastoreClient(prot, prot) {}
  ThriftHiveClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :     ::Apache::Hadoop::Hive::ThriftHiveMetastoreClient(iprot, oprot) {}
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void execute(const std::string& query);
  void send_execute(const std::string& query);
  void recv_execute();
  void fetchOne(std::string& _return);
  void send_fetchOne();
  void recv_fetchOne(std::string& _return);
  void fetchN(std::vector<std::string> & _return, const int32_t numRows);
  void send_fetchN(const int32_t numRows);
  void recv_fetchN(std::vector<std::string> & _return);
  void fetchAll(std::vector<std::string> & _return);
  void send_fetchAll();
  void recv_fetchAll(std::vector<std::string> & _return);
  void getSchema( ::Apache::Hadoop::Hive::Schema& _return);
  void send_getSchema();
  void recv_getSchema( ::Apache::Hadoop::Hive::Schema& _return);
  void getThriftSchema( ::Apache::Hadoop::Hive::Schema& _return);
  void send_getThriftSchema();
  void recv_getThriftSchema( ::Apache::Hadoop::Hive::Schema& _return);
  void getClusterStatus(HiveClusterStatus& _return);
  void send_getClusterStatus();
  void recv_getClusterStatus(HiveClusterStatus& _return);
  void getQueryPlan( ::Apache::Hadoop::Hive::QueryPlan& _return);
  void send_getQueryPlan();
  void recv_getQueryPlan( ::Apache::Hadoop::Hive::QueryPlan& _return);
  void clean();
  void send_clean();
  void recv_clean();
};

class ThriftHiveProcessor : public  ::Apache::Hadoop::Hive::ThriftHiveMetastoreProcessor {
 protected:
  boost::shared_ptr<ThriftHiveIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ThriftHiveProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_execute(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchOne(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchN(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fetchAll(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getSchema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getThriftSchema(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getClusterStatus(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getQueryPlan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ThriftHiveProcessor(boost::shared_ptr<ThriftHiveIf> iface) :
     ::Apache::Hadoop::Hive::ThriftHiveMetastoreProcessor(iface),
    iface_(iface) {
    processMap_["execute"] = &ThriftHiveProcessor::process_execute;
    processMap_["fetchOne"] = &ThriftHiveProcessor::process_fetchOne;
    processMap_["fetchN"] = &ThriftHiveProcessor::process_fetchN;
    processMap_["fetchAll"] = &ThriftHiveProcessor::process_fetchAll;
    processMap_["getSchema"] = &ThriftHiveProcessor::process_getSchema;
    processMap_["getThriftSchema"] = &ThriftHiveProcessor::process_getThriftSchema;
    processMap_["getClusterStatus"] = &ThriftHiveProcessor::process_getClusterStatus;
    processMap_["getQueryPlan"] = &ThriftHiveProcessor::process_getQueryPlan;
    processMap_["clean"] = &ThriftHiveProcessor::process_clean;
  }

  virtual ~ThriftHiveProcessor() {}
};

class ThriftHiveProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ThriftHiveProcessorFactory(const ::boost::shared_ptr< ThriftHiveIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ThriftHiveIfFactory > handlerFactory_;
};

class ThriftHiveMultiface : virtual public ThriftHiveIf, public  ::Apache::Hadoop::Hive::ThriftHiveMetastoreMultiface {
 public:
  ThriftHiveMultiface(std::vector<boost::shared_ptr<ThriftHiveIf> >& ifaces) : ifaces_(ifaces) {
    std::vector<boost::shared_ptr<ThriftHiveIf> >::iterator iter;
    for (iter = ifaces.begin(); iter != ifaces.end(); ++iter) {
       ::Apache::Hadoop::Hive::ThriftHiveMetastoreMultiface::add(*iter);
    }
  }
  virtual ~ThriftHiveMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ThriftHiveIf> > ifaces_;
  ThriftHiveMultiface() {}
  void add(boost::shared_ptr<ThriftHiveIf> iface) {
     ::Apache::Hadoop::Hive::ThriftHiveMetastoreMultiface::add(iface);
    ifaces_.push_back(iface);
  }
 public:
  void execute(const std::string& query) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->execute(query);
    }
    ifaces_[i]->execute(query);
  }

  void fetchOne(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchOne(_return);
    }
    ifaces_[i]->fetchOne(_return);
    return;
  }

  void fetchN(std::vector<std::string> & _return, const int32_t numRows) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchN(_return, numRows);
    }
    ifaces_[i]->fetchN(_return, numRows);
    return;
  }

  void fetchAll(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fetchAll(_return);
    }
    ifaces_[i]->fetchAll(_return);
    return;
  }

  void getSchema( ::Apache::Hadoop::Hive::Schema& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getSchema(_return);
    }
    ifaces_[i]->getSchema(_return);
    return;
  }

  void getThriftSchema( ::Apache::Hadoop::Hive::Schema& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getThriftSchema(_return);
    }
    ifaces_[i]->getThriftSchema(_return);
    return;
  }

  void getClusterStatus(HiveClusterStatus& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getClusterStatus(_return);
    }
    ifaces_[i]->getClusterStatus(_return);
    return;
  }

  void getQueryPlan( ::Apache::Hadoop::Hive::QueryPlan& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getQueryPlan(_return);
    }
    ifaces_[i]->getQueryPlan(_return);
    return;
  }

  void clean() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clean();
    }
    ifaces_[i]->clean();
  }

};

}}} // namespace

#endif
