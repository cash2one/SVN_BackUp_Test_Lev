<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="gbCommandLineArgs.Text" xml:space="preserve">
    <value>Arguments supplémentaires en ligne de commande</value>
  </data>
  <data name="lblAudioCodec.Text" xml:space="preserve">
    <value>Codec audio:</value>
  </data>
  <data name="lblAudioSource.Text" xml:space="preserve">
    <value>Source audio:</value>
  </data>
  <data name="lblAACQuality.Text" xml:space="preserve">
    <value>Bitrate:</value>
  </data>
  <data name="gbCodecs.Text" xml:space="preserve">
    <value>Codecs</value>
  </data>
  <data name="gbCommandLinePreview.Text" xml:space="preserve">
    <value>Aperçu de la ligne de commande</value>
  </data>
  <data name="nudx264CRF.ToolTip" xml:space="preserve">
    <value>Constante Factor (CRF): La gamme de l'échelle de quantification est 0-51: où 0 est sans perte, 23 est par défaut, et 51 est le pire possible.
Une valeur plus faible est une qualité supérieure et une gamme subjectivement saine est 18-28.
Considérez 18 pour être visuellement sans perte ou presque: il devrait ressembler la même ou presque la même que l'entrée mais il n'est techniquement pas sans perte.
La gamme est exponentielle, augmentant ainsi la valeur CRF de 6 est à peu près la moitié de la vitesse de transmission tandis que -6 est environ deux fois le débit binaire.
Une utilisation générale est de choisir la valeur CRF la plus haute qui fournit toujours une qualité acceptable.
Si la sortie semble bonne, alors essayez une valeur plus élevée et si elle est mauvaise, choisissez une valeur inférieure.</value>
  </data>
  <data name="btnCopyPreview.Text" xml:space="preserve">
    <value>Copier</value>
  </data>
  <data name="tbAACBitrate.ToolTip" xml:space="preserve">
    <value>128k par défaut.</value>
  </data>
  <data name="btnDownload.Text" xml:space="preserve">
    <value>Télécharger</value>
  </data>
  <data name="btnHelp.Text" xml:space="preserve">
    <value>Aide...</value>
  </data>
  <data name="lblMP3Quality.Text" xml:space="preserve">
    <value>Qualité:</value>
  </data>
  <data name="lblVorbisQuality.Text" xml:space="preserve">
    <value>Qualité:</value>
  </data>
  <data name="btnRefreshSources.Text" xml:space="preserve">
    <value>Rafraîchir</value>
  </data>
  <data name="tbVorbis_qscale.ToolTip" xml:space="preserve">
    <value>La gamme va de 0 à 10, 10 étant la plus haute qualité. 3-6 est un bon choix pour essayer. Par défaut : 3.</value>
  </data>
  <data name="tbMP3_qscale.ToolTip" xml:space="preserve">
    <value>La gamme va de 0 à 9 où une valeur inférieure est une qualité supérieure. 0-3 produira normalement des résultats transparents, 4 (par défaut) devrait être proche de la transparence perceptuelle, et 6 produit une qualité «acceptable».</value>
  </data>
  <data name="lblVideoSource.Text" xml:space="preserve">
    <value>Source vidéo:</value>
  </data>
  <data name="lblCodec.Text" xml:space="preserve">
    <value>Codec vidéo:</value>
  </data>
  <data name="btnTest.Text" xml:space="preserve">
    <value>Tester avec CMD</value>
  </data>
  <data name="$this.Text" xml:space="preserve">
    <value>ShareX - Options d'enregistrement de l'écran</value>
  </data>
  <data name="gbSource.Text" xml:space="preserve">
    <value>Sources</value>
  </data>
  <data name="cbCustomCommands.Text" xml:space="preserve">
    <value>Utiliser des commandes personnalisées</value>
  </data>
  <data name="lblVP8Bitrate.Text" xml:space="preserve">
    <value>Bitrate variable:</value>
  </data>
  <data name="gbFFmpegExe.Text" xml:space="preserve">
    <value>Chemin vers FFmpeg</value>
  </data>
  <data name="lblGIFDither.Text" xml:space="preserve">
    <value>Mode de tramage:</value>
  </data>
  <data name="lblx264Preset.Text" xml:space="preserve">
    <value>Préréglage:</value>
  </data>
  <data name="lblXvidQscale.Text" xml:space="preserve">
    <value>Bitrate variable:</value>
  </data>
  <data name="nudXvidQscale.ToolTip" xml:space="preserve">
    <value>1 étant la qualité la plus élevée/la taille du fichier la plus grande et 31 étant la qualité la plus faible/la taille du fichier la plus petite.</value>
  </data>
  <data name="cbx264Preset.ToolTip" xml:space="preserve">
    <value>Un préréglage est un ensemble d'options qui apporteront une certaine vitesse d'encodage au taux de compression. Un préréglage lent fournira une meilleure compression (la compression est la qualité par rapport à la taille du fichier).
Cela signifie que, par exemple, si vous ciblez une taille de fichier ou un certain débit binaire constant, vous obtiendrez une meilleure qualité avec un préréglage plus lent.
De même, pour l'encodage de qualité constante, vous conserverez simplement le bitrate en choisissant un préréglage plus lent.</value>
  </data>
  <data name="btnInstallHelperDevices.Text" xml:space="preserve">
    <value>Installer l'outil d'enregistrement</value>
  </data>
  <data name="lblHelperDevices.Text" xml:space="preserve">
    <value>Installe la source vidéo/audio "screen-capture-recorder" et "virtual-audio-capturer".</value>
  </data>
  <data name="cbGIFStatsMode.ToolTip" xml:space="preserve">
    <value>La valeur par défaut est "full".</value>
  </data>
  <data name="cbGIFDither.ToolTip" xml:space="preserve">
    <value>La valeur par défaut est "sierra2_4a".</value>
  </data>
  <data name="cbOverrideFFmpegPath.Text" xml:space="preserve">
    <value>Utiliser un chemin personnalisé</value>
  </data>
  <data name="lblGIFStatsMode.Text" xml:space="preserve">
    <value>Mode de palette:</value>
  </data>
</root>