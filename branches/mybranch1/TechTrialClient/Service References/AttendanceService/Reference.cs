//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TechTrialClient.Client.AttendanceService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Task", Namespace="http://schemas.datacontract.org/2004/07/TechTrialBackEnd.Model")]
    [System.SerializableAttribute()]
    public partial class Task : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TaskNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TaskName {
            get {
                return this.TaskNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TaskNameField, value) != true)) {
                    this.TaskNameField = value;
                    this.RaisePropertyChanged("TaskName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeRecord", Namespace="http://schemas.datacontract.org/2004/07/TechTrialBackEnd.Model")]
    [System.SerializableAttribute()]
    public partial class TimeRecord : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TaskIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TimeRecordIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TaskId {
            get {
                return this.TaskIdField;
            }
            set {
                if ((this.TaskIdField.Equals(value) != true)) {
                    this.TaskIdField = value;
                    this.RaisePropertyChanged("TaskId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TimeRecordId {
            get {
                return this.TimeRecordIdField;
            }
            set {
                if ((this.TimeRecordIdField.Equals(value) != true)) {
                    this.TimeRecordIdField = value;
                    this.RaisePropertyChanged("TimeRecordId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://TechTrialBackEnd", ConfigurationName="AttendanceService.IAttendanceService")]
    public interface IAttendanceService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/CheckAuth", ReplyAction="http://TechTrialBackEnd/IAttendanceService/CheckAuthResponse")]
        bool CheckAuth();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/CheckAuth", ReplyAction="http://TechTrialBackEnd/IAttendanceService/CheckAuthResponse")]
        System.Threading.Tasks.Task<bool> CheckAuthAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/GetTaskList", ReplyAction="http://TechTrialBackEnd/IAttendanceService/GetTaskListResponse")]
        TechTrialClient.Client.AttendanceService.Task[] GetTaskList();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/GetTaskList", ReplyAction="http://TechTrialBackEnd/IAttendanceService/GetTaskListResponse")]
        System.Threading.Tasks.Task<TechTrialClient.Client.AttendanceService.Task[]> GetTaskListAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/StartTracking", ReplyAction="http://TechTrialBackEnd/IAttendanceService/StartTrackingResponse")]
        TechTrialClient.Client.AttendanceService.TimeRecord StartTracking(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/StartTracking", ReplyAction="http://TechTrialBackEnd/IAttendanceService/StartTrackingResponse")]
        System.Threading.Tasks.Task<TechTrialClient.Client.AttendanceService.TimeRecord> StartTrackingAsync(int taskId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/StopTracking", ReplyAction="http://TechTrialBackEnd/IAttendanceService/StopTrackingResponse")]
        void StopTracking(TechTrialClient.Client.AttendanceService.TimeRecord rec);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://TechTrialBackEnd/IAttendanceService/StopTracking", ReplyAction="http://TechTrialBackEnd/IAttendanceService/StopTrackingResponse")]
        System.Threading.Tasks.Task StopTrackingAsync(TechTrialClient.Client.AttendanceService.TimeRecord rec);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAttendanceServiceChannel : TechTrialClient.Client.AttendanceService.IAttendanceService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AttendanceServiceClient : System.ServiceModel.ClientBase<TechTrialClient.Client.AttendanceService.IAttendanceService>, TechTrialClient.Client.AttendanceService.IAttendanceService {
        
        public AttendanceServiceClient() {
        }
        
        public AttendanceServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AttendanceServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AttendanceServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AttendanceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CheckAuth() {
            return base.Channel.CheckAuth();
        }
        
        public System.Threading.Tasks.Task<bool> CheckAuthAsync() {
            return base.Channel.CheckAuthAsync();
        }
        
        public TechTrialClient.Client.AttendanceService.Task[] GetTaskList() {
            return base.Channel.GetTaskList();
        }
        
        public System.Threading.Tasks.Task<TechTrialClient.Client.AttendanceService.Task[]> GetTaskListAsync() {
            return base.Channel.GetTaskListAsync();
        }
        
        public TechTrialClient.Client.AttendanceService.TimeRecord StartTracking(int taskId) {
            return base.Channel.StartTracking(taskId);
        }
        
        public System.Threading.Tasks.Task<TechTrialClient.Client.AttendanceService.TimeRecord> StartTrackingAsync(int taskId) {
            return base.Channel.StartTrackingAsync(taskId);
        }
        
        public void StopTracking(TechTrialClient.Client.AttendanceService.TimeRecord rec) {
            base.Channel.StopTracking(rec);
        }
        
        public System.Threading.Tasks.Task StopTrackingAsync(TechTrialClient.Client.AttendanceService.TimeRecord rec) {
            return base.Channel.StopTrackingAsync(rec);
        }
    }
}
