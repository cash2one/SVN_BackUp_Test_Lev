// <auto-generated />
namespace Microsoft.Data.Entity.Internal
{
    using System.Diagnostics;
    using System.Globalization;
    using System.Reflection;
    using System.Resources;
    using JetBrains.Annotations;

    public static class RelationalDesignStrings
    {
        private static readonly ResourceManager _resourceManager
            = new ResourceManager("EntityFramework.Relational.Design.RelationalDesignStrings", typeof(RelationalDesignStrings).GetTypeInfo().Assembly);

        /// <summary>
        /// Could not find type mapping for column '{columnName}' with data type '{dateType}'. Skipping column.
        /// </summary>
        public static string CannotFindTypeMappingForColumn([CanBeNull] object columnName, [CanBeNull] object dateType)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("CannotFindTypeMappingForColumn", "columnName", "dateType"), columnName, dateType);
        }

        /// <summary>
        /// ConnectionString is required to generate code.
        /// </summary>
        public static string ConnectionStringRequired
        {
            get { return GetString("ConnectionStringRequired"); }
        }

        /// <summary>
        /// The context class name passed in, {contextClassName}, is not a valid C# identifier.
        /// </summary>
        public static string ContextClassNotValidCSharpIdentifier([CanBeNull] object contextClassName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ContextClassNotValidCSharpIdentifier", "contextClassName"), contextClassName);
        }

        /// <summary>
        /// There was an error running the DbContext template. Message: {errorMessage}
        /// </summary>
        public static string ErrorRunningDbContextTemplate([CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorRunningDbContextTemplate", "errorMessage"), errorMessage);
        }

        /// <summary>
        /// There was an error running the EntityType template. Message: {errorMessage}
        /// </summary>
        public static string ErrorRunningEntityTypeTemplate([CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ErrorRunningEntityTypeTemplate", "errorMessage"), errorMessage);
        }

        /// <summary>
        /// Could not scaffold the foreign key '{foreignKeyName}'. One of the referenced properties or the referenced table could not be found.
        /// </summary>
        public static string ForeignKeyScaffoldError([CanBeNull] object foreignKeyName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ForeignKeyScaffoldError", "foreignKeyName"), foreignKeyName);
        }

        /// <summary>
        /// Unable to identify the primary key for table '{tableName}'.
        /// </summary>
        public static string MissingPrimaryKey([CanBeNull] object tableName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("MissingPrimaryKey", "tableName"), tableName);
        }

        /// <summary>
        /// ProjectPath is required to generate code.
        /// </summary>
        public static string ProjectPathRequired
        {
            get { return GetString("ProjectPathRequired"); }
        }

        /// <summary>
        /// Provider is required to generate code.
        /// </summary>
        public static string ProviderRequired
        {
            get { return GetString("ProviderRequired"); }
        }

        /// <summary>
        /// Metadata model returned should not be null. Provider: {providerTypeName} , connection string: {connectionString}.
        /// </summary>
        public static string ProviderReturnedNullModel([CanBeNull] object providerTypeName, [CanBeNull] object connectionString)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ProviderReturnedNullModel", "providerTypeName", "connectionString"), providerTypeName, connectionString);
        }

        /// <summary>
        /// No files generated in directory {outputDirectoryName}. The following file(s) already exist and must be made writeable to continue: {readOnlyFiles}.
        /// </summary>
        public static string ReadOnlyFiles([CanBeNull] object outputDirectoryName, [CanBeNull] object readOnlyFiles)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("ReadOnlyFiles", "outputDirectoryName", "readOnlyFiles"), outputDirectoryName, readOnlyFiles);
        }

        /// <summary>
        /// Root namespace of the project is required to generate code.
        /// </summary>
        public static string RootNamespaceRequired
        {
            get { return GetString("RootNamespaceRequired"); }
        }

        /// <summary>
        /// Template Processing Failed: {errorMessages}
        /// </summary>
        public static string TemplateProcessingFailed([CanBeNull] object errorMessages)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("TemplateProcessingFailed", "errorMessages"), errorMessages);
        }

        /// <summary>
        /// Unable to add a Navigation Property referencing type {referencedEntityTypeName} because of errors generating that EntityType.
        /// </summary>
        public static string UnableToAddNavigationProperty([CanBeNull] object referencedEntityTypeName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToAddNavigationProperty", "referencedEntityTypeName"), referencedEntityTypeName);
        }

        /// <summary>
        /// Unable to create metadata reference from name {metadataReferenceName}.
        /// </summary>
        public static string UnableToCreateMetadataReference([CanBeNull] object metadataReferenceName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToCreateMetadataReference", "metadataReferenceName"), metadataReferenceName);
        }

        /// <summary>
        /// Unable to generate EntityType {entityTypeName}. {errorMessage}
        /// </summary>
        public static string UnableToGenerateEntityType([CanBeNull] object entityTypeName, [CanBeNull] object errorMessage)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToGenerateEntityType", "entityTypeName", "errorMessage"), entityTypeName, errorMessage);
        }

        /// <summary>
        /// Unable to scaffold the index '{indexName}' because one of the properties it contains could not be scaffolded.
        /// </summary>
        public static string UnableToScaffoldIndex([CanBeNull] object indexName)
        {
            return string.Format(CultureInfo.CurrentCulture, GetString("UnableToScaffoldIndex", "indexName"), indexName);
        }

        private static string GetString(string name, params string[] formatterNames)
        {
            var value = _resourceManager.GetString(name);

            Debug.Assert(value != null);

            if (formatterNames != null)
            {
                for (var i = 0; i < formatterNames.Length; i++)
                {
                    value = value.Replace("{" + formatterNames[i] + "}", "{" + i + "}");
                }
            }

            return value;
        }
    }
}
