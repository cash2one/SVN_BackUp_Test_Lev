
var VERSION='0.1'
var FULL_VERSION='0.1'
var AUTHORS='Microsoft Open Technologies, Inc.'

use-standard-lifecycle
k-standard-goals

#compile-tests target='compile'
    @{
        var BASE_DIR = Directory.GetCurrentDirectory();
        var TARGET_DIR = Path.Combine(BASE_DIR, "artifacts");
        var BUILD_DIR = Path.Combine(TARGET_DIR, "build");
        var Configuration = E("Configuration") ?? "Debug";

        var projectFiles = Files.Include("test/EntityFramework.Relational.FunctionalTests/project.json")
            .Include("test/EntityFramework.Core.FunctionalTests/project.json")
            .Include("test/EntityFramework.Relational.Design.FunctionalTests/project.json");
        foreach (var projectFile in projectFiles)
        {
            DnuPack(projectFile, BUILD_DIR, Configuration);
        }

        foreach (var nupkg in Files.Include(Path.Combine(BUILD_DIR, "*.FunctionalTests/*.nupkg")))
        {
            File.Copy(nupkg, Path.Combine(BUILD_DIR, Path.GetFileName(nupkg)), true);
        }
    }

#write-package-references target='initialize' if='(!IsMono && !IsTeamCity) || E("IsEFPerfBuild") != null'
    var programFilesX86='${Environment.GetFolderPath(Environment.SpecialFolder.ProgramFilesX86)}'
    var buildProgram='${Path.Combine(programFilesX86, "MSBuild", "14.0", "Bin", "MSBuild.exe")}'
    for each='var projectFile in Files.Include("src/**/*.csproj").Include("test/**/*.csproj")'
        exec program='${buildProgram}' commandline='${projectFile} /t:WritePackageReferences /v:m /nologo /p:Configuration=${E("Configuration")}'

@{
    var packagesDir = Environment.GetEnvironmentVariable("DNX_PACKAGES")
        ?? Path.Combine(
            Environment.GetEnvironmentVariable("USERPROFILE") ?? Environment.GetEnvironmentVariable("HOME"),
            ".dnx",
            "packages");
}

var sqliteTestDir='test/EntityFramework.Sqlite.FunctionalTests/bin/${E("Configuration")}'
#copy-sqlite target='initialize' if='!IsMono && !IsTeamCity && !File.Exists(sqliteTestDir + "/x86/sqlite3.dll")'
    var sourceDir='${Directory.EnumerateDirectories(packagesDir, "Microsoft.Data.Sqlite/*").OrderByDescending(d => d).First() + "/runtimes/win/native"}'
    copy outputDir='${sqliteTestDir}'
    copy outputDir='test/EntityFramework.CrossStore.FunctionalTests/bin/${E("Configuration")}'
    copy outputDir='test/EntityFramework.Sqlite.Design.FunctionalTests/bin/${E("Configuration")}'
