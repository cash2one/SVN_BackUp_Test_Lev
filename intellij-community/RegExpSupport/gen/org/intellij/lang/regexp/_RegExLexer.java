/* The following code was generated by JFlex 1.4.3 on 11/1/14 12:37 PM */

/* It's an automatically generated code. Do not modify it. */
package org.intellij.lang.regexp;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.StringEscapesTokenTypes;
import com.intellij.psi.tree.IElementType;

import java.util.ArrayList;
import java.util.EnumSet;

@SuppressWarnings("ALL")

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 11/1/14 12:37 PM from the specification file
 * <tt>/Users/bas/Projects/IntelliJ IDEA Ultimate/tools/lexer/../../community/RegExpSupport/src/org/intellij/lang/regexp/regexp-lexer.flex</tt>
 */
class _RegExLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EMBRACED = 4;
  public static final int NEGATE_CLASS1 = 8;
  public static final int PY_NAMED_GROUP_REF = 22;
  public static final int QUOTED = 2;
  public static final int OPTIONS = 14;
  public static final int BRACKET_EXPRESSION = 26;
  public static final int PY_COND_REF = 24;
  public static final int YYINITIAL = 0;
  public static final int NAMED_GROUP = 18;
  public static final int CLASS2 = 10;
  public static final int CLASS1 = 6;
  public static final int COMMENT = 16;
  public static final int QUOTED_NAMED_GROUP = 20;
  public static final int PROP = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\10\0\2\62\1\16\1\0\1\62\1\67\22\0\1\55\1\65\1\0"+
    "\1\66\1\20\1\0\1\61\1\54\1\4\1\5\1\22\1\23\1\57"+
    "\1\50\1\3\1\0\1\2\7\47\2\1\1\60\1\0\1\53\1\64"+
    "\1\63\1\21\1\0\1\27\1\27\1\35\1\34\1\44\1\42\1\30"+
    "\1\51\1\37\2\13\1\56\1\56\1\56\1\13\1\41\1\43\1\13"+
    "\1\33\2\13\1\32\1\32\1\32\1\13\1\31\1\10\1\12\1\11"+
    "\1\17\1\14\1\0\1\26\1\27\1\36\1\34\1\26\1\26\1\13"+
    "\1\51\1\37\1\13\1\52\2\13\1\25\1\13\1\40\1\13\1\25"+
    "\1\32\1\25\1\46\1\32\1\32\1\45\1\13\1\30\1\6\1\24"+
    "\1\7\54\0\1\13\12\0\1\13\4\0\1\13\5\0\27\13\1\0"+
    "\37\13\1\0\u013f\13\31\0\162\13\4\0\14\13\16\0\5\13\11\0"+
    "\1\13\213\0\1\13\13\0\1\13\1\0\3\13\1\0\1\13\1\0"+
    "\24\13\1\0\54\13\1\0\46\13\1\0\5\13\4\0\202\13\10\0"+
    "\105\13\1\0\46\13\2\0\2\13\6\0\20\13\41\0\46\13\2\0"+
    "\1\13\7\0\47\13\110\0\33\13\5\0\3\13\56\0\32\13\5\0"+
    "\13\13\25\0\12\15\4\0\2\13\1\0\143\13\1\0\1\13\17\0"+
    "\2\13\7\0\2\13\12\15\3\13\2\0\1\13\20\0\1\13\1\0"+
    "\36\13\35\0\3\13\60\0\46\13\13\0\1\13\u0152\0\66\13\3\0"+
    "\1\13\22\0\1\13\7\0\12\13\4\0\12\15\25\0\10\13\2\0"+
    "\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\3\0"+
    "\1\13\36\0\2\13\1\0\3\13\4\0\12\15\2\13\23\0\6\13"+
    "\4\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\2\13"+
    "\1\0\2\13\37\0\4\13\1\0\1\13\7\0\12\15\2\0\3\13"+
    "\20\0\11\13\1\0\3\13\1\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\3\0\1\13\22\0\1\13\17\0\2\13\4\0\12\15"+
    "\25\0\10\13\2\0\2\13\2\0\26\13\1\0\7\13\1\0\2\13"+
    "\1\0\5\13\3\0\1\13\36\0\2\13\1\0\3\13\4\0\12\15"+
    "\1\0\1\13\21\0\1\13\1\0\6\13\3\0\3\13\1\0\4\13"+
    "\3\0\2\13\1\0\1\13\1\0\2\13\3\0\2\13\3\0\3\13"+
    "\3\0\10\13\1\0\3\13\55\0\11\15\25\0\10\13\1\0\3\13"+
    "\1\0\27\13\1\0\12\13\1\0\5\13\46\0\2\13\4\0\12\15"+
    "\25\0\10\13\1\0\3\13\1\0\27\13\1\0\12\13\1\0\5\13"+
    "\3\0\1\13\40\0\1\13\1\0\2\13\4\0\12\15\25\0\10\13"+
    "\1\0\3\13\1\0\27\13\1\0\20\13\46\0\2\13\4\0\12\15"+
    "\25\0\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13"+
    "\72\0\60\13\1\0\2\13\14\0\7\13\11\0\12\15\47\0\2\13"+
    "\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0\4\13"+
    "\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0\2\13"+
    "\1\0\4\13\1\0\2\13\11\0\1\13\2\0\5\13\1\0\1\13"+
    "\11\0\12\15\2\0\2\13\42\0\1\13\37\0\12\15\26\0\10\13"+
    "\1\0\42\13\35\0\4\13\164\0\42\13\1\0\5\13\1\0\2\13"+
    "\25\0\12\15\6\0\6\13\112\0\46\13\12\0\51\13\7\0\132\13"+
    "\5\0\104\13\5\0\122\13\6\0\7\13\1\0\77\13\1\0\1\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\47\13"+
    "\1\0\1\13\1\0\4\13\2\0\37\13\1\0\1\13\1\0\4\13"+
    "\2\0\7\13\1\0\1\13\1\0\4\13\2\0\7\13\1\0\7\13"+
    "\1\0\27\13\1\0\37\13\1\0\1\13\1\0\4\13\2\0\7\13"+
    "\1\0\47\13\1\0\23\13\16\0\11\15\56\0\125\13\14\0\u026c\13"+
    "\2\0\10\13\12\0\32\13\5\0\113\13\25\0\15\13\1\0\4\13"+
    "\16\0\22\13\16\0\22\13\16\0\15\13\1\0\3\13\17\0\64\13"+
    "\43\0\1\13\4\0\1\13\3\0\12\15\46\0\12\15\6\0\130\13"+
    "\10\0\51\13\127\0\35\13\51\0\12\15\36\13\2\0\5\13\u038b\0"+
    "\154\13\224\0\234\13\4\0\132\13\6\0\26\13\2\0\6\13\2\0"+
    "\46\13\2\0\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0"+
    "\3\13\1\0\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0"+
    "\3\13\1\0\7\13\164\0\1\13\15\0\1\13\202\0\1\13\4\0"+
    "\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\4\13\1\0\3\13\1\0\7\13\3\0"+
    "\3\13\5\0\5\13\u0ebb\0\2\13\52\0\5\13\5\0\2\13\4\0"+
    "\126\13\6\0\3\13\1\0\132\13\1\0\4\13\5\0\50\13\4\0"+
    "\136\13\21\0\30\13\70\0\20\13\u0200\0\u19b6\13\112\0\u51a6\13\132\0"+
    "\u048d\13\u0773\0\u2ba4\13\u215c\0\u012e\13\2\0\73\13\225\0\7\13\14\0"+
    "\5\13\5\0\1\13\1\0\12\13\1\0\15\13\1\0\5\13\1\0"+
    "\1\13\1\0\2\13\1\0\2\13\1\0\154\13\41\0\u016b\13\22\0"+
    "\100\13\2\0\66\13\50\0\14\13\164\0\5\13\1\0\207\13\23\0"+
    "\12\15\7\0\32\13\6\0\32\13\13\0\131\13\3\0\6\13\2\0"+
    "\6\13\2\0\6\13\2\0\3\13\43\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\5\0\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\3\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\11\1\36\1\3\1\37\1\40\1\37\1\41\1\42"+
    "\1\43\1\1\1\44\1\45\1\2\1\46\1\47\2\50"+
    "\1\51\1\52\1\0\1\53\1\54\1\55\1\56\1\11"+
    "\1\57\1\60\1\61\1\62\2\63\1\64\1\65\1\66"+
    "\1\67\1\54\1\70\1\11\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\0\1\100\1\101\1\102\1\103"+
    "\1\104\1\0\1\105\1\106\1\107\2\66\1\67\1\54"+
    "\1\110\1\111\1\112\1\113\1\114\1\115\1\0\1\106"+
    "\1\116\2\66\1\67\1\117\1\120\1\106\1\66\1\67"+
    "\1\66\1\121\4\66";

  private static int [] zzUnpackAction() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0310"+
    "\0\u0348\0\u0310\0\u0310\0\u0380\0\u03b8\0\u0310\0\u0310\0\u0310"+
    "\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u03f0"+
    "\0\u0310\0\u0428\0\u0310\0\u0460\0\u0310\0\u0310\0\u0310\0\u0310"+
    "\0\u0498\0\u0310\0\u04d0\0\u0310\0\u0508\0\u0310\0\u0310\0\u0380"+
    "\0\u0310\0\u0310\0\u0310\0\u0540\0\u0578\0\u0310\0\u0310\0\u0310"+
    "\0\u0310\0\u0310\0\u05b0\0\u05e8\0\u0310\0\u0620\0\u0310\0\u0658"+
    "\0\u0690\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310"+
    "\0\u06c8\0\u0310\0\u0310\0\u0700\0\u0738\0\u0770\0\u0310\0\u07a8"+
    "\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u0310\0\u07e0"+
    "\0\u0818\0\u0310\0\u0310\0\u0310\0\u0310\0\u0850\0\u0310\0\u0888"+
    "\0\u0310\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u0310\0\u0310\0\u0310"+
    "\0\u0310\0\u0310\0\u0310\0\u09a0\0\u09d8\0\u0310\0\u0a10\0\u0310"+
    "\0\u0a48\0\u0658\0\u0310\0\u0310\0\u0a80\0\u0ab8\0\u0af0\0\u0310"+
    "\0\u0b28\0\u0b60\0\u0b98\0\u0bd0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\3\17\1\20\1\21\1\22\1\23\1\17\1\24\1\17"+
    "\1\25\3\17\1\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\23\17\1\35\4\17\1\36\4\17\1\26\3\17"+
    "\1\37\1\26\12\17\1\40\55\17\1\41\2\42\4\41"+
    "\1\43\3\41\1\44\1\41\1\42\7\41\22\44\1\42"+
    "\1\41\2\44\3\41\1\44\1\45\10\41\11\46\1\47"+
    "\4\46\1\0\67\46\1\0\1\50\50\46\6\17\1\23"+
    "\1\17\1\51\1\52\1\53\3\17\1\54\1\27\30\17"+
    "\1\35\10\17\1\55\1\54\4\17\1\54\6\56\1\57"+
    "\1\56\1\60\1\56\1\25\16\56\1\61\1\56\1\61"+
    "\1\56\1\61\3\56\1\61\14\56\1\61\11\56\5\62"+
    "\1\63\5\62\1\64\11\62\22\64\1\62\1\65\2\64"+
    "\3\62\1\64\1\62\1\66\7\62\16\11\1\67\50\11"+
    "\1\67\13\62\1\44\11\62\22\44\2\62\2\44\3\62"+
    "\1\44\4\62\1\70\17\62\1\44\11\62\22\44\2\62"+
    "\2\44\1\62\1\71\1\62\1\44\16\62\1\63\5\62"+
    "\1\44\11\62\22\44\2\62\2\44\3\62\1\44\12\62"+
    "\2\42\2\62\1\63\5\62\1\44\1\62\1\42\7\62"+
    "\22\44\1\42\1\62\2\44\3\62\1\44\11\62\13\72"+
    "\1\44\11\72\22\44\2\72\2\44\3\72\1\44\1\72"+
    "\1\73\7\72\111\0\1\74\57\0\1\75\5\0\1\76"+
    "\50\0\1\77\1\100\1\101\4\102\1\77\1\102\1\77"+
    "\1\102\1\103\2\77\1\104\6\102\2\105\3\106\3\107"+
    "\1\110\1\111\1\110\2\112\1\103\1\113\1\103\1\114"+
    "\1\115\1\116\1\102\1\117\1\120\2\77\1\104\1\103"+
    "\3\77\1\104\4\77\1\104\44\0\1\121\24\0\2\42"+
    "\12\0\1\42\31\0\1\42\21\0\2\44\10\0\3\44"+
    "\7\0\23\44\1\0\2\44\3\0\1\44\22\0\1\122"+
    "\5\0\1\76\40\0\1\123\7\0\1\77\1\100\1\101"+
    "\4\102\1\77\1\102\1\124\1\102\1\103\2\77\1\104"+
    "\6\102\2\105\3\106\3\107\1\110\1\111\1\110\2\112"+
    "\1\103\1\113\1\103\1\114\1\115\1\116\1\102\1\117"+
    "\1\120\2\77\1\104\1\103\3\77\1\104\4\77\1\104"+
    "\61\0\1\125\21\0\1\64\11\0\22\64\2\0\2\64"+
    "\3\0\1\64\24\0\1\65\11\0\22\65\2\0\2\65"+
    "\3\0\1\65\22\0\1\126\62\0\1\127\34\0\1\130"+
    "\11\0\1\131\1\132\3\0\1\133\2\0\1\133\1\134"+
    "\1\135\1\136\12\0\1\137\57\0\2\100\44\0\1\100"+
    "\22\0\1\140\44\0\1\140\20\0\70\141\1\0\2\142"+
    "\3\0\1\143\17\0\2\142\4\0\3\142\3\0\1\142"+
    "\1\0\1\142\2\0\1\142\21\0\2\144\23\0\2\144"+
    "\4\0\3\144\3\0\1\144\1\0\1\144\2\0\1\144"+
    "\21\0\1\100\1\145\44\0\1\145\73\0\1\146\1\147"+
    "\66\0\1\150\10\0\1\151\67\0\1\152\1\153\2\0"+
    "\5\154\1\0\62\154\2\0\1\155\44\0\1\155\21\0"+
    "\2\156\23\0\2\156\4\0\3\156\3\0\1\156\1\0"+
    "\1\156\2\0\1\156\21\0\2\157\4\0\1\160\16\0"+
    "\2\157\4\0\3\157\3\0\1\157\1\0\1\157\2\0"+
    "\1\157\21\0\2\161\23\0\2\161\4\0\3\161\3\0"+
    "\1\161\1\0\1\161\2\0\1\161\21\0\1\100\1\162"+
    "\44\0\1\162\20\0\5\154\1\163\62\154\2\0\1\164"+
    "\44\0\1\164\21\0\2\165\4\0\1\156\16\0\2\165"+
    "\4\0\3\165\3\0\1\165\1\0\1\165\2\0\1\165"+
    "\21\0\2\166\23\0\2\166\4\0\3\166\3\0\1\166"+
    "\1\0\1\166\2\0\1\166\21\0\2\167\4\0\1\156"+
    "\16\0\2\167\4\0\3\167\3\0\1\167\1\0\1\167"+
    "\2\0\1\167\21\0\2\170\23\0\2\170\4\0\3\170"+
    "\3\0\1\170\1\0\1\170\2\0\1\170\21\0\2\171"+
    "\4\0\1\156\16\0\2\171\4\0\3\171\3\0\1\171"+
    "\1\0\1\171\2\0\1\171\21\0\2\172\4\0\1\156"+
    "\16\0\2\172\4\0\3\172\3\0\1\172\1\0\1\172"+
    "\2\0\1\172\21\0\2\173\4\0\1\156\16\0\2\173"+
    "\4\0\3\173\3\0\1\173\1\0\1\173\2\0\1\173"+
    "\21\0\2\174\4\0\1\156\16\0\2\174\4\0\3\174"+
    "\3\0\1\174\1\0\1\174\2\0\1\174\21\0\2\174"+
    "\4\0\1\160\16\0\2\174\4\0\3\174\3\0\1\174"+
    "\1\0\1\174\2\0\1\174\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\2\1\5\0\2\11\1\1\2\11\2\1\12\11"+
    "\1\1\1\11\1\1\1\11\1\1\4\11\1\1\1\11"+
    "\1\1\1\11\1\1\2\11\1\1\3\11\2\1\5\11"+
    "\2\1\1\11\1\0\1\11\2\1\7\11\1\1\2\11"+
    "\3\1\1\11\1\1\7\11\1\0\1\1\4\11\1\0"+
    "\1\11\1\1\1\11\4\1\6\11\1\0\1\1\1\11"+
    "\1\1\1\11\2\1\2\11\3\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[124];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    // This adds support for nested states. I'm no JFlex pro, so maybe this is overkill, but it works quite well.
    final ArrayList<Integer> states = new ArrayList();

    // This was an idea to use the regex implementation for XML schema regexes (which use a slightly different syntax)
    // as well, but is currently unfinished as it requires to tweak more places than just the lexer.
    private boolean xmlSchemaMode;

    int capturingGroupCount = 0;

    private boolean allowDanglingMetacharacters;
    private boolean allowNestedCharacterClasses;
    private boolean allowOctalNoLeadingZero;
    private boolean allowHexDigitClass;
    private boolean allowEmptyCharacterClass;
    private boolean allowHorizontalWhitespaceClass;
    private boolean allowCategoryShorthand;
    private boolean allowPosixBracketExpressions;

    _RegExLexer(EnumSet<RegExpCapability> capabilities) {
      this((java.io.Reader)null);
      this.xmlSchemaMode = capabilities.contains(RegExpCapability.XML_SCHEMA_MODE);
      this.allowDanglingMetacharacters = capabilities.contains(RegExpCapability.DANGLING_METACHARACTERS);
      this.allowNestedCharacterClasses = capabilities.contains(RegExpCapability.NESTED_CHARACTER_CLASSES);
      this.allowOctalNoLeadingZero = capabilities.contains(RegExpCapability.OCTAL_NO_LEADING_ZERO);
      this.commentMode = capabilities.contains(RegExpCapability.COMMENT_MODE);
      this.allowHexDigitClass = capabilities.contains(RegExpCapability.ALLOW_HEX_DIGIT_CLASS);
      this.allowHorizontalWhitespaceClass = capabilities.contains(RegExpCapability.ALLOW_HORIZONTAL_WHITESPACE_CLASS);
      this.allowEmptyCharacterClass = capabilities.contains(RegExpCapability.ALLOW_EMPTY_CHARACTER_CLASS);
      this.allowCategoryShorthand = capabilities.contains(RegExpCapability.UNICODE_CATEGORY_SHORTHAND);
      this.allowPosixBracketExpressions = capabilities.contains(RegExpCapability.POSIX_BRACKET_EXPRESSIONS);
    }

    private void yypushstate(int state) {
        states.add(yystate());
        yybegin(state);
    }

    private void yypopstate() {
        final int state = states.remove(states.size() - 1);
        yybegin(state);
    }

    private void handleOptions() {
      final String o = yytext().toString();
      if (o.contains("x")) {
        commentMode = !o.startsWith("-");
      }
    }

    // tracks whether the lexer is in comment mode, i.e. whether whitespace is not significant and whether to ignore
    // text after '#' till EOL
    boolean commentMode = false;


  _RegExLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  _RegExLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1352) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 81: 
          { return RegExpTT.UNICODE_CHAR;
          }
        case 82: break;
        case 7: 
          { if (yystate() != CLASS2) yypushstate(EMBRACED); return RegExpTT.LBRACE;
          }
        case 83: break;
        case 24: 
          { return RegExpTT.COMMA;
          }
        case 84: break;
        case 67: 
          { return RegExpTT.POS_LOOKAHEAD;
          }
        case 85: break;
        case 65: 
          { yybegin(QUOTED_NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_QUOTED_NAMED_GROUP;
          }
        case 86: break;
        case 80: 
          { return RegExpTT.COMMENT;
          }
        case 87: break;
        case 14: 
          { return RegExpTT.STAR;
          }
        case 88: break;
        case 63: 
          { yybegin(PY_COND_REF); return RegExpTT.PYTHON_COND_REF;
          }
        case 89: break;
        case 50: 
          { return RegExpTT.CHAR_CLASS;
          }
        case 90: break;
        case 36: 
          { handleOptions(); return RegExpTT.OPTIONS_OFF;
          }
        case 91: break;
        case 57: 
          { yypopstate(); return RegExpTT.QUOTE_END;
          }
        case 92: break;
        case 35: 
          { yybegin(YYINITIAL); return RegExpTT.GROUP_END;
          }
        case 93: break;
        case 42: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(CLASS1);
                            return RegExpTT.CLASS_BEGIN;
          }
        case 94: break;
        case 37: 
          { yybegin(YYINITIAL); return RegExpTT.COLON;
          }
        case 95: break;
        case 6: 
          { return RegExpTT.GROUP_END;
          }
        case 96: break;
        case 25: 
          { assert false : yytext();
          }
        case 97: break;
        case 18: 
          { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CHARACTER;
          }
        case 98: break;
        case 47: 
          { return commentMode ? RegExpTT.CHARACTER : RegExpTT.REDUNDANT_ESCAPE;
          }
        case 99: break;
        case 23: 
          { return RegExpTT.NAME;
          }
        case 100: break;
        case 29: 
          { yypopstate(); return RegExpTT.CLASS_END;
          }
        case 101: break;
        case 72: 
          { yybegin(NAMED_GROUP); return RegExpTT.RUBY_NAMED_GROUP_REF;
          }
        case 102: break;
        case 34: 
          { yybegin(YYINITIAL); return RegExpTT.BAD_CHARACTER;
          }
        case 103: break;
        case 53: 
          { yypushstate(QUOTED); return RegExpTT.QUOTE_BEGIN;
          }
        case 104: break;
        case 40: 
          { return RegExpTT.BAD_CHARACTER;
          }
        case 105: break;
        case 21: 
          { return RegExpTT.NUMBER;
          }
        case 106: break;
        case 4: 
          { return RegExpTT.DOT;
          }
        case 107: break;
        case 77: 
          { return RegExpTT.NEG_LOOKBEHIND;
          }
        case 108: break;
        case 33: 
          { yypopstate(); if (allowCategoryShorthand) return RegExpTT.CATEGORY_SHORT_HAND; else yypushback(1);
          }
        case 109: break;
        case 45: 
          { return (allowOctalNoLeadingZero ? RegExpTT.OCT_CHAR : RegExpTT.BAD_OCT_VALUE);
          }
        case 110: break;
        case 68: 
          { return RegExpTT.NEG_LOOKAHEAD;
          }
        case 111: break;
        case 10: 
          { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.CTRL_CHARACTER;
          }
        case 112: break;
        case 66: 
          { return RegExpTT.NON_CAPT_GROUP;
          }
        case 113: break;
        case 73: 
          { yybegin(QUOTED_NAMED_GROUP); return RegExpTT.RUBY_QUOTED_NAMED_GROUP_REF;
          }
        case 114: break;
        case 28: 
          { if (allowNestedCharacterClasses) {
                           yypushstate(CLASS2);
                           return RegExpTT.CLASS_BEGIN;
                        }
                        return RegExpTT.CHARACTER;
          }
        case 115: break;
        case 19: 
          { if (commentMode) { yypushstate(COMMENT); return RegExpTT.COMMENT; } else return RegExpTT.CHARACTER;
          }
        case 116: break;
        case 52: 
          { yypushstate(PROP); return RegExpTT.PROPERTY;
          }
        case 117: break;
        case 8: 
          { yypushstate(CLASS2);
                            return RegExpTT.CLASS_BEGIN;
          }
        case 118: break;
        case 76: 
          { return RegExpTT.POS_LOOKBEHIND;
          }
        case 119: break;
        case 20: 
          { if (allowDanglingMetacharacters) {
                          yypopstate(); yypushback(1);
                        } else {
                          return RegExpTT.BAD_CHARACTER;
                        }
          }
        case 120: break;
        case 78: 
          { return RegExpTT.HEX_CHAR;
          }
        case 121: break;
        case 1: 
          { handleOptions(); return RegExpTT.OPTIONS_ON;
          }
        case 122: break;
        case 44: 
          { if (yystate() == CLASS2) return RegExpTT.ESC_CHARACTER;
                                while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {
                                  yypushback(1);
                                }
                                return RegExpTT.BACKREF;
          }
        case 123: break;
        case 62: 
          { yybegin(CLASS2); return RegExpTT.BRACKET_EXPRESSION_END;
          }
        case 124: break;
        case 2: 
          { yypopstate(); return RegExpTT.COMMENT;
          }
        case 125: break;
        case 17: 
          { return RegExpTT.MINUS;
          }
        case 126: break;
        case 48: 
          { return RegExpTT.ESC_CTRL_CHARACTER;
          }
        case 127: break;
        case 32: 
          { yypopstate(); yypushstate(EMBRACED); return RegExpTT.LBRACE;
          }
        case 128: break;
        case 13: 
          { return RegExpTT.QUEST;
          }
        case 129: break;
        case 74: 
          { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.PYTHON_NAMED_GROUP;
          }
        case 130: break;
        case 5: 
          { capturingGroupCount++; return RegExpTT.GROUP_BEGIN;
          }
        case 131: break;
        case 15: 
          { return RegExpTT.PLUS;
          }
        case 132: break;
        case 70: 
          { return RegExpTT.OCT_CHAR;
          }
        case 133: break;
        case 39: 
          { yybegin(YYINITIAL); return RegExpTT.QUOTE;
          }
        case 134: break;
        case 31: 
          { yypopstate(); yypushback(1);
          }
        case 135: break;
        case 27: 
          { yybegin(CLASS1); return RegExpTT.CARET;
          }
        case 136: break;
        case 58: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (allowNestedCharacterClasses) {
                              yypushstate(CLASS1);
                              return RegExpTT.CLASS_BEGIN;
                            }
                            return RegExpTT.CHARACTER;
          }
        case 137: break;
        case 59: 
          { if (allowPosixBracketExpressions) {
                            yybegin(BRACKET_EXPRESSION);
                            return RegExpTT.BRACKET_EXPRESSION_BEGIN;
                          } else {
                            yypushback(1);
                            return RegExpTT.CHARACTER;
                          }
          }
        case 138: break;
        case 60: 
          { if (!allowNestedCharacterClasses) return RegExpTT.CHARACTER;
                                return RegExpTT.REDUNDANT_ESCAPE;
          }
        case 139: break;
        case 38: 
          { yybegin(YYINITIAL); return RegExpTT.GT;
          }
        case 140: break;
        case 75: 
          { yybegin(PY_NAMED_GROUP_REF); return RegExpTT.PYTHON_NAMED_GROUP_REF;
          }
        case 141: break;
        case 16: 
          { return RegExpTT.UNION;
          }
        case 142: break;
        case 3: 
          { return RegExpTT.CHARACTER;
          }
        case 143: break;
        case 41: 
          { yybegin(OPTIONS); return RegExpTT.SET_OPTIONS;
          }
        case 144: break;
        case 26: 
          { yybegin(CLASS2); return RegExpTT.CHARACTER;
          }
        case 145: break;
        case 71: 
          { if (xmlSchemaMode) { yypushback(1); return RegExpTT.CHAR_CLASS; } else return RegExpTT.CTRL;
          }
        case 146: break;
        case 30: 
          { return commentMode ? com.intellij.psi.TokenType.WHITE_SPACE : RegExpTT.ESC_CHARACTER;
          }
        case 147: break;
        case 12: 
          { return RegExpTT.DOLLAR;
          }
        case 148: break;
        case 61: 
          { if (allowNestedCharacterClasses) return RegExpTT.ANDAND; else yypushback(1); return RegExpTT.CHARACTER;
          }
        case 149: break;
        case 51: 
          { if (xmlSchemaMode) return RegExpTT.CHAR_CLASS; else return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
          }
        case 150: break;
        case 43: 
          { return RegExpTT.REDUNDANT_ESCAPE;
          }
        case 151: break;
        case 56: 
          { return (allowHexDigitClass || allowHorizontalWhitespaceClass ? RegExpTT.CHAR_CLASS : StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN);
          }
        case 152: break;
        case 49: 
          { return yystate() != CLASS2 ? RegExpTT.BOUNDARY : RegExpTT.ESC_CHARACTER;
          }
        case 153: break;
        case 22: 
          { yypopstate(); return RegExpTT.RBRACE;
          }
        case 154: break;
        case 69: 
          // lookahead expression with fixed base length
          zzMarkedPos = zzStartRead + 1;
          { if (allowEmptyCharacterClass) yypushstate(CLASS2); else yypushstate(NEGATE_CLASS1);
                              return RegExpTT.CLASS_BEGIN;
          }
        case 155: break;
        case 64: 
          { yybegin(NAMED_GROUP); capturingGroupCount++; return RegExpTT.RUBY_NAMED_GROUP;
          }
        case 156: break;
        case 55: 
          { return StringEscapesTokenTypes.INVALID_UNICODE_ESCAPE_TOKEN;
          }
        case 157: break;
        case 54: 
          { return RegExpTT.BAD_HEX_VALUE;
          }
        case 158: break;
        case 9: 
          { return StringEscapesTokenTypes.INVALID_CHARACTER_ESCAPE_TOKEN;
          }
        case 159: break;
        case 11: 
          { return RegExpTT.CARET;
          }
        case 160: break;
        case 46: 
          { return RegExpTT.ESC_CHARACTER;
          }
        case 161: break;
        case 79: 
          { if (allowOctalNoLeadingZero) return RegExpTT.OCT_CHAR;
                                if (yystate() == CLASS2) return RegExpTT.ESC_CHARACTER;
                                while (yylength() > 2 && Integer.parseInt(yytext().toString().substring(1)) > capturingGroupCount) {
                                  yypushback(1);
                                }
                                return RegExpTT.BACKREF;
          }
        case 162: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
